{"version":3,"file":"igx-shape-data-source.d.ts","sources":["igx-shape-data-source.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { IgRect } from './IgRect';\r\nimport { ShapefileConverter as ShapefileConverter_internal } from \"./ShapefileConverter\";\r\nimport { ShapeType } from \"./ShapeType\";\r\nimport { Header } from \"./Header\";\r\nimport { IgxAsyncCompletedEventArgs } from './igx-async-completed-event-args';\r\nimport { IgxShapefileRecord } from './igx-shapefile-record';\r\nimport { IgxShapeFilterRecordEventArgs } from './igx-shape-filter-record-event-args';\r\n/**\r\n * Class used to convert Shapefiles into CLR objects.\r\n*/\r\nexport declare class IgxShapeDataSource {\r\n    protected createImplementation(): ShapefileConverter_internal;\r\n    protected _implementation: any;\r\n    readonly i: ShapefileConverter_internal;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    protected _provideImplementation(i: any): void;\r\n    dataBind(): void;\r\n    /**\r\n    * Gets the point data.\r\n    */\r\n    getPointData(): IgxShapefileRecord[];\r\n    name: string;\r\n    /**\r\n     * Gets the world bounding rectangle, as read from the header of the Shapefile.\r\n    */\r\n    worldRect: IgRect;\r\n    /**\r\n     * Gets the world bounding rectangle, based on the filtered shapes\r\n    */\r\n    computedWorldRect: IgRect;\r\n    /**\r\n     * Gets the shape type, as read from the header of the Shapefile.\r\n    */\r\n    readonly shapeType: ShapeType;\r\n    /**\r\n     * Gets the header of the Shapefile.\r\n    */\r\n    shapeHeader: Header;\r\n    /**\r\n     * The Uri of the .shp portion of the Shapefile.\r\n    */\r\n    deferImportCompleted: boolean;\r\n    /**\r\n     * The Uri of the .shp portion of the Shapefile.\r\n    */\r\n    shapefileSource: string;\r\n    /**\r\n     * The Uri of the .dbf portion of the Shapefile.\r\n    */\r\n    databaseSource: string;\r\n    /**\r\n     * The total number of ShapefileRecords in the collection.\r\n    */\r\n    readonly count: number;\r\n    findByName(name: string): any;\r\n    getWorldBounds(useComputed: boolean): IgRect;\r\n    setWorldBounds(setComputed: boolean, bounds: IgRect): void;\r\n    sendImportCompleted(): void;\r\n    getRecordsCount(): number;\r\n    getRecord(index: number): IgxShapefileRecord;\r\n    getRecordBounds(index: number): IgRect;\r\n    getRecordFieldNames(index: number): string[];\r\n    getRecordValue(index: number, fieldName: string): any;\r\n    removeRecord(index: number): void;\r\n    shiftAllShapes(offsetX: number, offsetY: number): void;\r\n    shiftShapes(recordIndex: number, offsetX: number, offsetY: number): void;\r\n    getMaxLongitude(recordIndex: number, useLargestShape: boolean, fromLongitude: number, toLongitude: number): number;\r\n    setRecordValue(index: number, fieldName: string, value: any): void;\r\n    getRecordValues(fieldName: string): any[];\r\n    setRecordValues(fieldName: string, values: any[]): void;\r\n    getLargestShapeBoundsForRecord(index: number): IgRect;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n    private _importPending;\r\n    /**\r\n     * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n    */\r\n    readonly importPending: EventEmitter<{\r\n        sender: any;\r\n        args: IgxAsyncCompletedEventArgs;\r\n    }>;\r\n    private _importCompleted;\r\n    /**\r\n     * Event raised when the Shapefile has been imported from both the ShapefileSource and DatabaseSource Uris.\r\n    */\r\n    readonly importCompleted: EventEmitter<{\r\n        sender: any;\r\n        args: IgxAsyncCompletedEventArgs;\r\n    }>;\r\n    private _filter;\r\n    readonly filter: EventEmitter<{\r\n        sender: any;\r\n        args: IgxShapeFilterRecordEventArgs;\r\n    }>;\r\n}\r\n"]}