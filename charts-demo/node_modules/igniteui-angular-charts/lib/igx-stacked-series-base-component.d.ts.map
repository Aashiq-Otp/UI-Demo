{"version":3,"file":"igx-stacked-series-base-component.d.ts","sources":["igx-stacked-series-base-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { StackedSeriesBase } from \"./StackedSeriesBase\";\r\nimport { IgxStackedSeriesCreatedEventArgs } from './igx-stacked-series-created-event-args';\r\nimport { IgxCategorySeriesComponent } from \"./igx-category-series-component\";\r\nimport { AfterContentInit, QueryList } from '@angular/core';\r\nimport { IgxStackedFragmentSeriesComponent } from './igx-stacked-fragment-series-component';\r\nimport { IgxStackedSeriesCollection } from './igx-stacked-series-collection';\r\n/**\r\n * Represents a IgxStackedSeriesBaseComponent base series.\r\n*/\r\nexport declare const IgxStackedSeriesBaseComponent_PROVIDERS: any[];\r\nexport declare abstract class IgxStackedSeriesBaseComponent extends IgxCategorySeriesComponent implements AfterContentInit, OnInit {\r\n    protected createImplementation(): StackedSeriesBase;\r\n    ngOnInit(): void;\r\n    protected _implementation: any;\r\n    readonly i: StackedSeriesBase;\r\n    constructor();\r\n    ngAfterContentInit(): void;\r\n    fragments: QueryList<IgxStackedFragmentSeriesComponent>;\r\n    private _seriesAdapter;\r\n    /**\r\n     * The series actually present in the chart. Do not directly modify this array.\r\n     * This array's contents can be modified by causing Angular to reproject the child content.\r\n     * Or adding and removing series from the manual series collection on the series property.\r\n     */\r\n    actualSeries: IgxStackedFragmentSeriesComponent[];\r\n    private _series;\r\n    /**\r\n     * A collection or manually added series for the chart.\r\n    */\r\n    readonly series: IgxStackedSeriesCollection;\r\n    static _createFromInternal(internal: any): IgxStackedSeriesBaseComponent;\r\n    /**\r\n * Gets or sets whether series should be automatically generated. Reqiures the use of GroupBy as the ItemsSource.\r\n*/\r\n    autoGenerateSeries: boolean;\r\n    /**\r\n     * Gets or sets whether the order of the fragment series should be reversed in the legend.\r\n    */\r\n    reverseLegendOrder: boolean;\r\n    /**\r\n     * Checks if this series is a stacked series\r\n    */\r\n    readonly isStacked: boolean;\r\n    findByName(name: string): any;\r\n    /**\r\n * Simulates a pointer hover over the series surface.\r\n\r\n* @param point  * The pointer position relative to the series viewport over which to hover.\r\n*/\r\n    simulateHover(point: IgPoint): void;\r\n    /**\r\n     * Scrolls the series to display the item for the specified data item.\r\n     * The series is scrolled by the minimum amount required to place the specified data item within\r\n     * the central 80% of the visible axis.\r\n    \r\n    * @param item  * The data item (item) to scroll to.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    private _seriesCreated;\r\n    /**\r\n     * Event raised when a new fragment series is automatically generated.\r\n    */\r\n    readonly seriesCreated: EventEmitter<{\r\n        sender: any;\r\n        args: IgxStackedSeriesCreatedEventArgs;\r\n    }>;\r\n}\r\n"]}