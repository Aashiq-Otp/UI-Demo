{"version":3,"file":"igx-waterfall-series-component.d.ts","sources":["igx-waterfall-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxHorizontalAnchoredCategorySeriesComponent } from \"./igx-horizontal-anchored-category-series-component\";\r\nimport { IgxMarkerSeriesComponent } from \"./igx-marker-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { WaterfallSeries } from \"./WaterfallSeries\";\r\n/**\r\n * Represents a IgxDataChartComponent waterfall column series.\r\n*\r\n* `IgxWaterfallSeriesComponent` belongs to a group of `IgxCategorySeriesComponent` and it is rendered using a collection of vertical columns that show the difference between consecutive data points.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"data\">\r\n*     <igx-category-x-axis #xAxis\r\n*         label=\"label\">\r\n*     </igx-category-x-axis>\r\n*     <igx-numeric-y-axis #yAxis>\r\n*     </igx-numeric-y-axis>\r\n*     <igx-waterfall-series\r\n*         [xAxis]=\"xAxis\"\r\n*         [yAxis]=\"yAxis\"\r\n*         valueMemberPath=\"value\">\r\n*     </igx-waterfall-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series: IgxWaterfallSeriesComponent = new IgxWaterfallSeriesComponent();\r\n* series.xAxis = this.xAxis;\r\n* series.yAxis = this.yAxis;\r\n* series.valueMemberPath = \"value\";\r\n* this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxWaterfallSeriesComponent_PROVIDERS: ({\r\n    provide: typeof IgxMarkerSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare class IgxWaterfallSeriesComponent extends IgxHorizontalAnchoredCategorySeriesComponent {\r\n    protected createImplementation(): WaterfallSeries;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: WaterfallSeries;\r\n    constructor();\r\n    /**\r\n     * Overridden by derived series classes to indicate when negative colors are supported or not.\r\n    */\r\n    readonly isNegativeColorSupported: boolean;\r\n    /**\r\n     * Gets or sets the brush to use for negative portions of the series.\r\n    *\r\n    * Gets or sets the color used to draw negative declines in values for this `IgxWaterfallSeriesComponent`.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-category-x-axis #xAxis\r\n    *         label=\"label\">\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis #yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *     <igx-waterfall-series\r\n    *         [xAxis]=\"xAxis\"\r\n    *         [yAxis]=\"yAxis\"\r\n    *         negativeBrush=\"#ff0000\"\r\n    *         valueMemberPath=\"value\">\r\n    *     </igx-waterfall-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath = \"value\";\r\n    * series.negativeBrush = \"#ff0000\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    negativeBrush: string;\r\n    /**\r\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\r\n    *\r\n    * Gets or sets the amount to round corners in the direction of the X axis in this series.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-category-x-axis #xAxis\r\n    *         label=\"label\">\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis #yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *     <igx-waterfall-series\r\n    *         [xAxis]=\"xAxis\"\r\n    *         [yAxis]=\"yAxis\"\r\n    *         radiusX=\"15\"\r\n    *         radiusY=\"15\"\r\n    *         valueMemberPath=\"value\">\r\n    *     </igx-waterfall-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath = \"value\";\r\n    * series.radiusX = 15;\r\n    * series.radiusY = 15;\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    radiusX: number;\r\n    /**\r\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\r\n    *\r\n    * Gets or sets the amount to round corners in the direction of the Y axis in this series.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-category-x-axis #xAxis\r\n    *         label=\"label\">\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis #yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *     <igx-waterfall-series\r\n    *         [xAxis]=\"xAxis\"\r\n    *         [yAxis]=\"yAxis\"\r\n    *         radiusX=\"15\"\r\n    *         radiusY=\"15\"\r\n    *         valueMemberPath=\"value\">\r\n    *     </igx-waterfall-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath = \"value\";\r\n    * series.radiusX = 15;\r\n    * series.radiusY = 15;\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    radiusY: number;\r\n    /**\r\n     * Brush to use for outlining negative elements in the waterfall series.\r\n    *\r\n    * Gets or sets the color used to draw borders of negative declines in values for this `IgxWaterfallSeriesComponent`.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-category-x-axis #xAxis\r\n    *         label=\"label\">\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis #yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *     <igx-waterfall-series\r\n    *         [xAxis]=\"xAxis\"\r\n    *         [yAxis]=\"yAxis\"\r\n    *         negativeOutline=\"#ff0000\"\r\n    *         valueMemberPath=\"value\">\r\n    *     </igx-waterfall-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath = \"value\";\r\n    * series.negativeOutline = \"#ff0000\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    negativeOutline: string;\r\n    setNegativeColors(negativeBrush: string, negativeOutline: string): void;\r\n    /**\r\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\r\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\r\n    *\r\n    * Returns a bounding box `Rect` for a data value given a `Point`.\r\n    *\r\n    * ```ts\r\n    * let box : IgxRect = series.getSeriesValueBoundingBox({x: 4, y: 7});\r\n    * ```\r\n    */\r\n    getSeriesValueBoundingBox(world: IgPoint): IgRect;\r\n    /**\r\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\r\n    \r\n    *\r\n    * Returns the width of items in the `IgxWaterfallSeriesComponent`.\r\n    *\r\n    * ```ts\r\n    * let itemSpan: number = series.GetItemSpan();\r\n    * ```\r\n    */\r\n    getItemSpan(): number;\r\n}\r\n"]}