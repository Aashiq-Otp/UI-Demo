{"version":3,"file":"igx-category-angle-axis-component.d.ts","sources":["igx-category-angle-axis-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgxCategoryAxisBaseComponent } from \"./igx-category-axis-base-component\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { CategoryAngleAxis } from \"./CategoryAngleAxis\";\r\n/**\r\n * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.\r\n*\r\n* `IgxCategoryAngleAxisComponent` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"dataSource\"   >\r\n*     <igx-category-angle-axis name=\"angleAxis\" label=\"Department\" />\r\n*     <igx-numeric-radius-axis name=\"radiusAxis\" />\r\n*  </igx-data-chart>\r\n* ```\r\n*/\r\nexport declare const IgxCategoryAngleAxisComponent_PROVIDERS: {\r\n    provide: typeof IgxAxisComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxCategoryAngleAxisComponent extends IgxCategoryAxisBaseComponent {\r\n    protected createImplementation(): CategoryAngleAxis;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: CategoryAngleAxis;\r\n    constructor();\r\n    /**\r\n     * Checks if the axis is of angular type\r\n    */\r\n    readonly isAngular: boolean;\r\n    /**\r\n     * Indicates the angle in degress that the chart's 0th angle should be offset.\r\n    *\r\n    * Indicates the angle in degress that the chart's 0th angle should be offset.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"dataSource\"   >\r\n    *     <igx-category-angle-axis name=\"angleAxis\" startAngleOffset=30/>\r\n    *     <igx-numeric-radius-axis name=\"radiusAxis\" />\r\n    *  </igx-data-chart>\r\n    * ```\r\n    */\r\n    startAngleOffset: number;\r\n    /**\r\n     * Gets or sets the frequency of displayed labels.\r\n     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\r\n    *\r\n    * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.\r\n    * For example, an interval of 2 will display every other label.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"dataSource\"   >\r\n    *     <igx-category-angle-axis name=\"angleAxis\" interval =2 />\r\n    *     <igx-numeric-radius-axis name=\"radiusAxis\" />\r\n    *  </igx-data-chart>\r\n    * ```\r\n    */\r\n    interval: number;\r\n    /**\r\n     * Gets the effective value for the current Interval.\r\n    *\r\n    * Gets the effective value for the current Interval.\r\n    */\r\n    actualInterval: number;\r\n    /**\r\n     * Gets or sets the frequency of displayed minor lines.\r\n     * The set value is a factor that determines how the minor lines will be displayed.\r\n    *\r\n    * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.\r\n    */\r\n    minorInterval: number;\r\n    /**\r\n     * Gets the effective value for the current MinorInterval.\r\n    *\r\n    * Get the effective value for the current minorInterval.\r\n    */\r\n    actualMinorInterval: number;\r\n    /**\r\n     * Gets the scaled angle in radians from the raw axis value.\r\n    \r\n    * @param unscaledAngle  * The raw axis value.\r\n    */\r\n    getScaledAngle(unscaledAngle: number): number;\r\n    /**\r\n     * Gets the raw axis value from the scaled angle in radians.\r\n    \r\n    */\r\n    getUnscaledAngle(scaledAngle: number): number;\r\n    private _actualIntervalChange;\r\n    readonly actualIntervalChange: EventEmitter<number>;\r\n}\r\n"]}