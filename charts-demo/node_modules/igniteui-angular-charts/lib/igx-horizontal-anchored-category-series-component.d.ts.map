{"version":3,"file":"igx-horizontal-anchored-category-series-component.d.ts","sources":["igx-horizontal-anchored-category-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxCategoryAxisBaseComponent } from \"./igx-category-axis-base-component\";\r\nimport { IgxNumericYAxisComponent } from \"./igx-numeric-y-axis-component\";\r\nimport { IgxAnchoredCategorySeriesComponent } from \"./igx-anchored-category-series-component\";\r\nimport { IgxMarkerSeriesComponent } from \"./igx-marker-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { HorizontalAnchoredCategorySeries } from \"./HorizontalAnchoredCategorySeries\";\r\n/**\r\n * Base class for anchored category series with a category x-axis and a numeric y-axis.\r\n*\r\n* Instantiate HorizontalAnchoredCategorySeries\r\n*\r\n* ```html\r\n*  <igx-data-chart\r\n*       [dataSource]=\"data\"  >\r\n* \t <igx-column-series\r\n*         #series\r\n*         [xAxis]=\"xAxis\"\r\n*         [yAxis]=\"yAxis\"\r\n*         valueMemberPath=\"value\"\r\n*           >\r\n*       </igx-column-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series = new IgxColumnSeriesComponent();\r\n* series.xAxis = this.xAxis;\r\n* series.yAxis = this.yAxis;\r\n* series.valueMemberPath=\"value\";\r\n* this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxHorizontalAnchoredCategorySeriesComponent_PROVIDERS: ({\r\n    provide: typeof IgxMarkerSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare abstract class IgxHorizontalAnchoredCategorySeriesComponent extends IgxAnchoredCategorySeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: HorizontalAnchoredCategorySeries;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the effective x-axis for this series.\r\n    *\r\n    * Instantiate xAxis\r\n    *\r\n    * <!-- Angular -->\r\n    *\r\n    * ```js\r\n    *  <igx-data-chart\r\n    *       [dataSource]=\"data\"  >\r\n    * \t  <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis\r\n    *         >\r\n    *       </igx-category-x-axis>\r\n    * \t <igx-column-series\r\n    *     ...\r\n    *         [xAxis]=\"xAxis\"\r\n    *     ...\r\n    *           >\r\n    *       </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxColumnSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath=\"value\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    xAxis: IgxCategoryAxisBaseComponent;\r\n    /**\r\n     * Gets or sets the effective y-axis for this series.\r\n    *\r\n    * Instantiate yAxis\r\n    *\r\n    * <!-- Angular -->\r\n    *\r\n    * ```js\r\n    *  <igx-data-chart\r\n    *       [dataSource]=\"data\"  >\r\n    * \t  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    *       </igx-numeric-y-axis>\r\n    * \t <igx-column-series\r\n    *     ...\r\n    *         [yAxis]=\"yAxis\"\r\n    *     ...\r\n    *           >\r\n    *       </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxColumnSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath=\"value\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    yAxis: IgxNumericYAxisComponent;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\r\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\r\n    *\r\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\r\n    *\r\n    * <!-- Angular JS -->\r\n    *\r\n    *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());\r\n    *\r\n    * <!-- Ignite JS -->\r\n    *\r\n    *      N/A\r\n    */\r\n    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;\r\n    /**\r\n     * Returns the offset value for this series if grouped on a category axis.\r\n    \r\n    *\r\n    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\r\n    *\r\n    * <!-- Angular JS -->\r\n    *\r\n    *       var g = series.getOffsetValue();\r\n    *\r\n    * <!-- Ignite JS -->\r\n    *\r\n    *      N/A\r\n    */\r\n    getOffsetValue(): number;\r\n    /**\r\n     * Returns the width of the category grouping this series is in.\r\n    \r\n    *\r\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\r\n    *\r\n    * <!-- Angular JS -->\r\n    *\r\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\r\n    *\r\n    * <!-- Ignite JS -->\r\n    *\r\n    *      N/A\r\n    */\r\n    getCategoryWidth(): number;\r\n    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    /**\r\n     * Determine if object can be used as XAxis\r\n    \r\n    * @param axis  * The object to check\r\n    *\r\n    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\r\n    *\r\n    * <!-- Angular JS -->\r\n    *\r\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\r\n    */\r\n    canUseAsXAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as YAxis\r\n    \r\n    * @param axis  * The object to check\r\n    *\r\n    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\r\n    *\r\n    * <!-- Ignite JS -->\r\n    *\r\n    *      N/A\r\n    */\r\n    canUseAsYAxis(axis: any): boolean;\r\n}\r\n"]}