{"version":3,"file":"igx-polar-base-component.d.ts","sources":["igx-polar-base-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxNumericAngleAxisComponent } from \"./igx-numeric-angle-axis-component\";\r\nimport { IgxNumericRadiusAxisComponent } from \"./igx-numeric-radius-axis-component\";\r\nimport { TrendLineType } from \"igniteui-angular-core\";\r\nimport { IgxMarkerSeriesComponent } from \"./igx-marker-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { PolarBase } from \"./PolarBase\";\r\n/**\r\n * Represents the base class from which all IgxDataChartComponent polar series are derived.\r\n*/\r\nexport declare const IgxPolarBaseComponent_PROVIDERS: ({\r\n    provide: typeof IgxMarkerSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare abstract class IgxPolarBaseComponent extends IgxMarkerSeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: PolarBase;\r\n    constructor();\r\n    /**\r\n     * Checks if this series is a polar series\r\n    */\r\n    readonly isPolar: boolean;\r\n    /**\r\n     * Gets or sets the path to use to find the angle values for the series.\r\n    */\r\n    angleMemberPath: string;\r\n    /**\r\n     * Gets or sets the path to use to get the radius values for the series.\r\n    */\r\n    radiusMemberPath: string;\r\n    /**\r\n     * Gets the effective angle axis for the current series object.\r\n    */\r\n    angleAxis: IgxNumericAngleAxisComponent;\r\n    /**\r\n     * Gets the effective radius axis for the current series object.\r\n    */\r\n    radiusAxis: IgxNumericRadiusAxisComponent;\r\n    /**\r\n     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian\r\n     * spiral based interpolation.\r\n    */\r\n    useCartesianInterpolation: boolean;\r\n    /**\r\n     * Gets or sets the maximum number of markers displayed by the current series.\r\n     * If more than the specified number of markers are visible, the polar series will automatically\r\n     * choose a representative set.\r\n    */\r\n    maximumMarkers: number;\r\n    /**\r\n     * Gets or sets the trend type for the current series object.\r\n    */\r\n    trendLineType: TrendLineType;\r\n    /**\r\n     * Gets or sets the brush that specifies how the current series\r\n     * object's trend line is drawn.\r\n    */\r\n    trendLineBrush: string;\r\n    /**\r\n     * Gets the effective TrendLineBrush for this series.\r\n    */\r\n    actualTrendLineBrush: string;\r\n    /**\r\n     * Gets or sets the thickness of the current series object's trend line.\r\n    */\r\n    trendLineThickness: number;\r\n    /**\r\n     * Gets or sets the moving average period for the current series object.\r\n    */\r\n    trendLinePeriod: number;\r\n    /**\r\n     * Sets or Gets the Trendline Z index.\r\n    */\r\n    trendLineZIndex: number;\r\n    /**\r\n     * Gets or sets whether to clip the series to the bounds.\r\n     * Setting this to true can effect performance.\r\n    */\r\n    clipSeriesToBounds: boolean;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n     * Scrolls the requested item into view, if possible.\r\n    \r\n    * @param item  * The item to scroll into view.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    /**\r\n     * Gets the index of the item that resides at the provided world coordinates.\r\n    \r\n    * @param world  * The world coordinates of the requested item.\r\n    */\r\n    getItemIndex(world: IgPoint): number;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Determine if object can be used as RadiusAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsRadiusAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as AngleAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsAngleAxis(axis: any): boolean;\r\n}\r\n"]}