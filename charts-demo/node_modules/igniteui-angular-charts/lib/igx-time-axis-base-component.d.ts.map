{"version":3,"file":"igx-time-axis-base-component.d.ts","sources":["igx-time-axis-base-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgxCategoryAxisBaseComponent } from \"./igx-category-axis-base-component\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { TimeAxisBase } from \"./TimeAxisBase\";\r\n/**\r\n * Represents an category-based horizontal X axis that uses a DateTime scale.\r\n*\r\n* Represents horizontal axis that uses a DateTime scale.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"data\">\r\n*     <igx-time-x-axis\r\n* \t\tdateTimeMemberPath=\"date\"\r\n* \t\t#xAxis>\r\n*     </igx-time-x-axis>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let xAxis = new IgxTimeXAxisComponent();\r\n* xAxis.dataTimeMemberPath=\"date\";\r\n* this.chart.axes.add(xAxis);\r\n* ```\r\n*/\r\nexport declare const IgxTimeAxisBaseComponent_PROVIDERS: {\r\n    provide: typeof IgxAxisComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare abstract class IgxTimeAxisBaseComponent extends IgxCategoryAxisBaseComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: TimeAxisBase;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the DateTime mapping property for the axis.\r\n    *\r\n    * Use `dateTimeMemberPath` property for DateTime mapping with the axis.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-time-x-axis\r\n    * \t\tdateTimeMemberPath=\"date\"\r\n    * \t\t#xAxis>\r\n    *     </igx-time-x-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let xAxis = new IgxTimeXAxisComponent();\r\n    * xAxis.dataTimeMemberPath=\"date\";\r\n    * this.chart.axes.add(xAxis);\r\n    * ```\r\n    */\r\n    dateTimeMemberPath: string;\r\n    /**\r\n     * Gets or sets whether the data assigned to the date time axis should be considered pre-sorted by date/time.\r\n    *\r\n    * Use `isDataPreSorted` property to decide if the data assigned to the date time axis should be considered pre-sorted by date/time.\r\n    */\r\n    isDataPreSorted: boolean;\r\n    /**\r\n     * Gets the coerced minimum value.\r\n    *\r\n    * Use `actualMinimumValue` to get the coerced maximum value.\r\n    */\r\n    actualMinimumValue: Date;\r\n    /**\r\n     * Gets the coerced maximum value.\r\n    *\r\n    * Use `actualMaximumValue` to get the  coerced maximum value\r\n    */\r\n    actualMaximumValue: Date;\r\n    /**\r\n     * Gets or sets the axis MinimumValue.\r\n    *\r\n    * Use `minimumValue` property for axis minimum value.\r\n    *\r\n    * ```ts\r\n    * this.timeXAxis.maximumValue=\"2019-12-26\";\r\n    * ```\r\n    */\r\n    minimumValue: Date;\r\n    /**\r\n     * Gets or sets the axis MaximumValue.\r\n    *\r\n    * Use `maximumValue` property for axis maximum value.\r\n    *\r\n    * ```ts\r\n    * this.timeXAxis.maximumValue=\"2019-12-26\";\r\n    * ```\r\n    */\r\n    maximumValue: Date;\r\n    /**\r\n     * Checks if the axis is of date time axis type\r\n    *\r\n    * Use `isDateTime` property to Checks if the axis is of date time axis type.\r\n    *\r\n    * ```ts\r\n    * const isDT = this.timeXAxis.isDateTime;\r\n    * ```\r\n    */\r\n    readonly isDateTime: boolean;\r\n    /**\r\n     * Checks if axis requires sorting of items\r\n    *\r\n    * Use `isSorting` property to Checks if axis requires sorting of items.\r\n    *\r\n    * ```ts\r\n    * const isDT = this.timeXAxis.isDateTime;\r\n    * ```\r\n    */\r\n    readonly isSorting: boolean;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Gets the index of the data item with the value nearest the given value.\r\n    \r\n    * @param unscaledValue  * The value to find a value close to.\r\n    */\r\n    getIndexClosestToUnscaledValue(unscaledValue: number): number;\r\n    /**\r\n     * Updates the axis when the data has been changed.\r\n    \r\n    */\r\n    notifyDataChanged(): void;\r\n    private _actualMinimumValueChange;\r\n    readonly actualMinimumValueChange: EventEmitter<Date>;\r\n    private _actualMaximumValueChange;\r\n    readonly actualMaximumValueChange: EventEmitter<Date>;\r\n}\r\n"]}