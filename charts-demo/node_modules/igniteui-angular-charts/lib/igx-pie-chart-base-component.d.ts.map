{"version":3,"file":"igx-pie-chart-base-component.d.ts","sources":["igx-pie-chart-base-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgDataTemplate } from \"igniteui-angular-core\";\r\nimport { LabelsPosition } from \"./LabelsPosition\";\r\nimport { Visibility } from \"igniteui-angular-core\";\r\nimport { LeaderLineType } from \"./LeaderLineType\";\r\nimport { OthersCategoryType } from \"./OthersCategoryType\";\r\nimport { IgxIndexCollection } from \"./igx-index-collection\";\r\nimport { SweepDirection } from \"igniteui-angular-core\";\r\nimport { SliceSelectionMode } from \"./SliceSelectionMode\";\r\nimport { IgxObjectCollection } from \"igniteui-angular-core\";\r\nimport { IgxLabelClickEventArgs } from \"./igx-label-click-event-args\";\r\nimport { IgxSelectedItemChangingEventArgs } from \"./igx-selected-item-changing-event-args\";\r\nimport { IgxSelectedItemsChangingEventArgs } from \"./igx-selected-items-changing-event-args\";\r\nimport { IgxSelectedItemChangedEventArgs } from \"./igx-selected-item-changed-event-args\";\r\nimport { IgxSelectedItemsChangedEventArgs } from \"./igx-selected-items-changed-event-args\";\r\nimport { IgxSliceClickEventArgs } from \"./igx-slice-click-event-args\";\r\nimport { PieChartBase } from \"./PieChartBase\";\r\n/**\r\n * Represents the base class for the pie chart.\r\n*/\r\nexport declare const IgxPieChartBaseComponent_PROVIDERS: any[];\r\nexport declare abstract class IgxPieChartBaseComponent implements OnInit {\r\n    protected createImplementation(): PieChartBase;\r\n    ngOnInit(): void;\r\n    protected _implementation: any;\r\n    /**\r\n     * @hidden\r\n     */\r\n    readonly i: PieChartBase; /**\r\n                                 * @hidden\r\n                                 */\r\n    static _createFromInternal(internal: any): IgxPieChartBaseComponent;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the amount of space between the center and the start of the arc. This property should be set between 0 and 1.\r\n     * If InnerExtent is set to a value greater than 1, it will be interpreted as a percentage, effectively divided by 100.\r\n    */\r\n    innerExtent: number;\r\n    /**\r\n     * Gets or Sets the property name that contains the values.\r\n    */\r\n    valueMemberPath: string;\r\n    /**\r\n     * Gets or sets the property name that contains the labels.\r\n    */\r\n    labelMemberPath: string;\r\n    /**\r\n     * Gets or sets the property name that contains the legend labels.\r\n    */\r\n    legendLabelMemberPath: string;\r\n    /**\r\n     * Gets or sets the position of chart labels.\r\n    */\r\n    labelsPosition: LabelsPosition;\r\n    /**\r\n     * Gets or sets the color for labels rendered outside of the pie chart.\r\n    */\r\n    labelOuterColor: string;\r\n    /**\r\n     * Gets or sets the color for labels rendered inside of the pie chart.\r\n    */\r\n    labelInnerColor: string;\r\n    /**\r\n     * Gets or sets whether the leader lines are visible.\r\n    */\r\n    leaderLineVisibility: Visibility;\r\n    /**\r\n     * Gets or sets what type of leader lines will be used for the outside end labels.\r\n    */\r\n    leaderLineType: LeaderLineType;\r\n    /**\r\n     * Gets or sets the margin between a label and the end of its leader line. The default is 6 pixels.\r\n    */\r\n    leaderLineMargin: number;\r\n    /**\r\n     * Gets or sets the ToolTip for the chart.\r\n    */\r\n    toolTip: any;\r\n    /**\r\n     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.\r\n    */\r\n    othersCategoryThreshold: number;\r\n    /**\r\n     * Gets or sets whether to use numeric or percent-based threshold value.\r\n    */\r\n    othersCategoryType: OthersCategoryType;\r\n    /**\r\n     * Gets or sets the label of the Others slice.\r\n    */\r\n    othersCategoryText: string;\r\n    /**\r\n     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.\r\n    */\r\n    explodedRadius: number;\r\n    /**\r\n     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.\r\n    */\r\n    radiusFactor: number;\r\n    /**\r\n     * Gets or sets whether the slices can be selected.\r\n    */\r\n    allowSliceSelection: boolean;\r\n    /**\r\n     * Gets or sets whether the slices can be exploded.\r\n    */\r\n    allowSliceExplosion: boolean;\r\n    private _explodedSlices;\r\n    /**\r\n     * Gets or sets the collection of exploded slice indices.\r\n    */\r\n    explodedSlices: IgxIndexCollection;\r\n    /**\r\n     * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.\r\n    */\r\n    labelExtent: number;\r\n    /**\r\n     * Gets or sets the starting angle of the chart.\r\n     * The default zero value is equivalent to 3 o'clock.\r\n    */\r\n    startAngle: number;\r\n    /**\r\n     * Gets or sets the rotational direction of the chart.\r\n    */\r\n    sweepDirection: SweepDirection;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    othersCategoryFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    othersCategoryStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    othersCategoryStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    othersCategoryOpacity: number;\r\n    ensureOthersCategoryStyle(): void;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    selectedSliceFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    selectedSliceStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    selectedSliceStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    selectedSliceOpacity: number;\r\n    ensureSelectedStyle(): void;\r\n    /**\r\n     * Gets or sets the palette of brushes to use for coloring the slices.\r\n    */\r\n    brushes: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes to use for outlines on the slices.\r\n    */\r\n    outlines: string[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    labelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LabelFormat string.\r\n    */\r\n    labelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    othersLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the OthersLabelFormat string.\r\n    */\r\n    othersLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    legendLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LegendLabelFormat string.\r\n    */\r\n    legendLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    legendOthersLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LegendOthersLabelFormat string.\r\n    */\r\n    legendOthersLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the LegendItemTemplate property.\r\n     * The legend item control content is created according to the LegendItemTemplate on-demand by\r\n     * the chart object itself.\r\n    */\r\n    legendItemTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets or sets the LegendItemBadgeTemplate property.\r\n     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\r\n     * the chart object itself.\r\n    */\r\n    legendItemBadgeTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets or sets whether all surface interactions with the plot area should be disabled.\r\n    */\r\n    isSurfaceInteractionDisabled: boolean;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\r\n    */\r\n    formatLabel: (obj: any) => string;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.\r\n    */\r\n    formatLegendLabel: (obj: any) => string;\r\n    /**\r\n     * Gets or sets the scaling value used to affect the pixel density of the control.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    pixelScalingRatio: number;\r\n    /**\r\n     * Resolved pixel scaling ratio. Unless explicitly overridden by the PieChartBase.PixelScalingRatio property,\r\n     * this one returns the default ratio enforced by device. High resolution devices will initialize this property\r\n     * to a higher value.\r\n    */\r\n    actualPixelScalingRatio: number;\r\n    /**\r\n     * Gets or sets which mode to use for selecting slices.\r\n    */\r\n    selectionMode: SliceSelectionMode;\r\n    /**\r\n     * Gets or sets the currently selected data item.  If a different data item is provided the pie chart\r\n     * will select the slice associated with the new item.\r\n    */\r\n    selectedItem: any;\r\n    private _selectedItems;\r\n    /**\r\n     * Gets the currently selected data items.  Adding or removing data items from this collection will\r\n     * select or deselect the slices associated with those items.\r\n    */\r\n    selectedItems: IgxObjectCollection;\r\n    /**\r\n     * Manually overrides the style to use for the labels.\r\n    */\r\n    textStyle: string;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n     * Returns the chart visuals expressed as a serialized string.\r\n    \r\n    */\r\n    exportSerializedVisualData(): string;\r\n    /**\r\n     * Simulates a mouse click action at the specified point.\r\n    \r\n    * @param point  * The point to click at.\r\n    */\r\n    simulateLeftClick(point: IgPoint): void;\r\n    /**\r\n     * Invoked by the containing object to provide reference to the container.\r\n    \r\n    * @param container  * Reference to the container.\r\n    */\r\n    provideContainer(container: any): void;\r\n    /**\r\n     * Notification from the containing object that the container has been resized.\r\n    \r\n    */\r\n    notifyContainerResized(): void;\r\n    /**\r\n     * Invoked when the instance is being destroyed.\r\n    \r\n    */\r\n    destroy(): void;\r\n    /**\r\n     * Use to force the pie chart to finish any deferred work before printing or evaluating its visual.\r\n     * This should only be called if the visual of the pie chart needs to be synchronously saved or evaluated.\r\n     * Calling this method too often will hinder the performance of the pie chart.\r\n    \r\n    */\r\n    flush(): void;\r\n    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;\r\n    /**\r\n     * Manually notifies the pie chart's data source that the data it has bound to has been cleared and needs to be re-examined.\r\n     * This should not be called if the data that the pie chart is bound to is already observable.\r\n    \r\n    * @param source_  * The data source.\r\n    */\r\n    notifyClearItems(source_: any): void;\r\n    notifyInsertItem(source_: any, index: number, newItem: any): void;\r\n    notifyRemoveItem(source_: any, index: number, oldItem: any): void;\r\n    /**\r\n     * Assigns data source for the items.\r\n    \r\n    * @param source_  * Array of the data source items.\r\n    */\r\n    setWidgetLevelDataSource(source_: any): void;\r\n    /**\r\n     * Resets items data source.\r\n    \r\n    */\r\n    removeWidgetLevelDataSource(): void;\r\n    /**\r\n     * Invoked when style is updated.\r\n    \r\n    */\r\n    styleUpdated(): void;\r\n    private _labelClick;\r\n    /**\r\n     * Raised when the slice's label is clicked.\r\n    */\r\n    readonly labelClick: EventEmitter<{\r\n        sender: any;\r\n        args: IgxLabelClickEventArgs;\r\n    }>;\r\n    private _selectedItemChanging;\r\n    /**\r\n     * Raised when the SelectedItem property is changing.  This event is cancelable.\r\n    */\r\n    readonly selectedItemChanging: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSelectedItemChangingEventArgs;\r\n    }>;\r\n    private _selectedItemsChanging;\r\n    /**\r\n     * Raised when the SelectedItems collection is changing.  This event is cancelable.\r\n    */\r\n    readonly selectedItemsChanging: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSelectedItemsChangingEventArgs;\r\n    }>;\r\n    private _selectedItemChanged;\r\n    /**\r\n     * Raised when the SelectedItem property has changed.\r\n    */\r\n    readonly selectedItemChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSelectedItemChangedEventArgs;\r\n    }>;\r\n    private _selectedItemsChanged;\r\n    /**\r\n     * Raised when the SelectedItems collection has changed.\r\n    */\r\n    readonly selectedItemsChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSelectedItemsChangedEventArgs;\r\n    }>;\r\n    private _sliceClick;\r\n    /**\r\n     * Raised when the slice is clicked.\r\n    */\r\n    readonly sliceClick: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSliceClickEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}