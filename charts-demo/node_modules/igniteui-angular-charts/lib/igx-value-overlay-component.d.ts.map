{"version":3,"file":"igx-value-overlay-component.d.ts","sources":["igx-value-overlay-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { ValueOverlay } from \"./ValueOverlay\";\r\n/**\r\n * Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.\r\n*/\r\nexport declare const IgxValueOverlayComponent_PROVIDERS: {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxValueOverlayComponent extends IgxSeriesComponent {\r\n    protected createImplementation(): ValueOverlay;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: ValueOverlay;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the axis used by the value overlay.\r\n    */\r\n    axis: IgxAxisComponent;\r\n    /**\r\n     * Gets or sets the value of the overlay.\r\n    */\r\n    value: number;\r\n    /**\r\n     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.\r\n    */\r\n    isAxisAnnotationEnabled: boolean;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for the axis annotation.\r\n    */\r\n    axisAnnotationFormatLabel: (item: any) => string;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationTextColor: string;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationBackground: string;\r\n    /**\r\n     * Gets or sets the precision to use displaying values for interpolated positions.\r\n    */\r\n    axisAnnotationInterpolatedValuePrecision: number;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationOutline: string;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingLeft: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingTop: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingRight: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingBottom: number;\r\n    /**\r\n     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationStrokeThickness: number;\r\n    /**\r\n     * Gets whether the series is a value overlay.\r\n    */\r\n    readonly isValueOverlay: boolean;\r\n    readonly labelResolved: string;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    /**\r\n     * Gets the item item index associated with the specified world position\r\n    \r\n    * @param world\r\n    */\r\n    getItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    /**\r\n     * Requests that the provided item should be brought into view if possible.\r\n    \r\n    * @param item  * The item to attempt to bring into view.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    /**\r\n     * Gets the label for a data item.\r\n    \r\n    * @param value  * The unscaled value to get a label for.\r\n    */\r\n    getLabel(value: number): string;\r\n}\r\n"]}