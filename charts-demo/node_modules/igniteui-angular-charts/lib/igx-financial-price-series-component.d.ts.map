{"version":3,"file":"igx-financial-price-series-component.d.ts","sources":["igx-financial-price-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { TrendLineType } from \"igniteui-angular-core\";\r\nimport { PriceDisplayType } from \"./PriceDisplayType\";\r\nimport { IgxFinancialSeriesComponent } from \"./igx-financial-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { FinancialPriceSeries } from \"./FinancialPriceSeries\";\r\n/**\r\n * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\r\n * Default required members: Open, Low, High, Close\r\n*\r\n* The `IgxFinancialPriceSeriesComponent` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.\r\n*\r\n* ```html\r\n*  <igx-data-chart\r\n*     #chart\r\n*         [dataSource]=\"data\" >\r\n*  <igx-ordinal-time-x-axis\r\n*     dateTimeMemberPath=\"TimeStamp\"\r\n*     #xAxis >\r\n*     </igx-ordinal-time-x-axis>\r\n*  <igx-numeric-y-axis\r\n*         minimumValue=\"0\"\r\n*         #yAxis>\r\n* </igx-numeric-y-axis>\r\n* <igx-financial-price-series\r\n*     [xAxis]=\"xAxis\"\r\n*       [yAxis]=\"yAxis\"\r\n*       openMemberPath=\"open\"\r\n*       highMemberPath=\"high\"\r\n*       lowMemberPath=\"low\"\r\n*       closeMemberPath=\"close\"\r\n*       volumeMemberPath=\"volume\"\r\n*       >\r\n* </igx-financial-price-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series = new IgxFinancialPriceSeriesComponent();\r\n*    series.xAxis = this.xAxis;\r\n*    series.yAxis = this.yAxis;\r\n*    series.openMemberPath = \"open\";\r\n*    series.highMemberPath = \"high\";\r\n*    series.lowMemberPath = \"low\";\r\n*    series.closeMemberPath = \"close\";\r\n*    series.volumeMemberPath=\"volume\";\r\n*    this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxFinancialPriceSeriesComponent_PROVIDERS: ({\r\n    provide: typeof IgxFinancialSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare class IgxFinancialPriceSeriesComponent extends IgxFinancialSeriesComponent {\r\n    protected createImplementation(): FinancialPriceSeries;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: FinancialPriceSeries;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the trend type for the current financial series.\r\n    *\r\n    * Use the `trendLineType` property for the trend type of the current financial series.\r\n    *\r\n    * ```ts\r\n    * series.trendLineType= \"CubicFit\";\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *       trendLineType=\"CubicFit\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    trendLineType: TrendLineType;\r\n    /**\r\n     * Gets or sets the brush to use to draw the trend line.\r\n    *\r\n    * Use the `trendLineBrush` property to brush the the trend line.\r\n    *\r\n    * ```ts\r\n    * series.trendLineBrush=\"red\";\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *      trendLineBrush=\"red\" >\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    trendLineBrush: string;\r\n    /**\r\n     * Gets the effective TrendLineBrush for this FinancialPriceSeries.\r\n    *\r\n    * Use the `actualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.\r\n    */\r\n    actualTrendLineBrush: string;\r\n    /**\r\n     * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.\r\n    *\r\n    * Use the `trendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.\r\n    *\r\n    * ```ts\r\n    * series.trendLineThickness=5;\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *       trendLineThickness=\"3\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    trendLineThickness: number;\r\n    /**\r\n     * Gets or sets the trend line period for the current series.\r\n     * The typical, and initial, value for trend line period is 7.\r\n    *\r\n    * Use the `trendLinePeriod` property for the periodo the the current series.\r\n    *\r\n    * ```ts\r\n    * series.trendLinePeriod= 7;\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *       trendLinePeriod=\"7\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    trendLinePeriod: number;\r\n    /**\r\n     * Gets or sets the display type for the current FinancialPriceSeries object.\r\n    *\r\n    * Use the `displayType` property for the display type of the current FinancialPriceSeries object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *       displayType=\"Candlestick\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.displayType=PriceDisplayType.Candlestick;\r\n    * ```\r\n    */\r\n    displayType: PriceDisplayType;\r\n    /**\r\n     * Brush to use for outlining negative elements in the series.\r\n    *\r\n    * Use the `negativeOutline` property to brush the outline negative elements in the series.\r\n    *\r\n    * ```ts\r\n    * series.negativeOutline=\"red\";\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *  <igx-ordinal-time-x-axis\r\n    *     dateTimeMemberPath=\"TimeStamp\"\r\n    *     #xAxis >\r\n    *     </igx-ordinal-time-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    *       negativeOutline=\"Red\" >\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    negativeOutline: string;\r\n    /**\r\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\r\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\r\n    *\r\n    * The `getSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.\r\n    */\r\n    getSeriesValueBoundingBox(world: IgPoint): IgRect;\r\n    /**\r\n     * Scrolls the series to display the item for the specified data item.\r\n     * The categorySeries is scrolled by the minimum amount required to place the specified data item within\r\n     * the central 80% of the visible axis.\r\n    \r\n    * @param item  * The data item (item) to scroll to.\r\n    *\r\n    * The `scrollIntoView` methos scrolls the series to display the item for the specified data item.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    /**\r\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\r\n    \r\n    *\r\n    * The `getItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.\r\n    *\r\n    * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned\r\n    */\r\n    getItemSpan(): number;\r\n    setNegativeColors(negativeBrush: string, negativeOutline: string): void;\r\n}\r\n"]}