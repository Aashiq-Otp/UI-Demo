{"version":3,"file":"igx-treemap-component.d.ts","sources":["igx-treemap-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ViewContainerRef, Injector, ComponentFactoryResolver, AfterContentInit, Renderer2, QueryList, NgZone } from '@angular/core';\r\nimport { Treemap } from \"./Treemap\";\r\nimport { IgxTreemapNodeStyleMappingComponent } from './igx-treemap-node-style-mapping-component';\r\nimport { IgxTreemapNodeStyleMappingCollection } from './igx-treemap-node-style-mapping-collection';\r\nimport { TreemapFillScaleMode } from \"./TreemapFillScaleMode\";\r\nimport { IgxTreemapNodeStylingEventArgs } from \"./igx-treemap-node-styling-event-args\";\r\nimport { TreemapOrientation } from './TreemapOrientation';\r\nimport { TreemapLayoutType } from './TreemapLayoutType';\r\nimport { IgxTreemapNodePointerEventArgs } from './igx-treemap-node-pointer-event-args';\r\nimport { TreemapHeaderDisplayMode } from './TreemapHeaderDisplayMode';\r\nimport { HorizontalAlignment } from \"igniteui-angular-core\";\r\nimport { VerticalAlignment } from \"igniteui-angular-core\";\r\nimport { TreemapLabelHorizontalFitMode } from './TreemapLabelHorizontalFitMode';\r\nimport { TreemapLabelVerticalFitMode } from './TreemapLabelVerticalFitMode';\r\nexport declare const IgxTreemapComponent_PROVIDERS: any[];\r\nexport declare class IgxTreemapComponent implements AfterContentInit {\r\n    private renderer;\r\n    private _elRef;\r\n    private ngZone;\r\n    private injector;\r\n    private componentFactoryResolver;\r\n    container: Element;\r\n    private _height;\r\n    private _width;\r\n    height: string;\r\n    width: string;\r\n    _dynamicContent: ViewContainerRef;\r\n    contentStyleMappings: QueryList<IgxTreemapNodeStyleMappingComponent>;\r\n    /**\r\n    * The style mappings actually present in the chart. Do not directly modify this array.\r\n    * This array's contents can be modified by causing Angular to reproject the child content.\r\n    * Or adding and removing stye mappings from the manual style mapping collection on the styleMappings property.\r\n    */\r\n    actualStyleMappings: IgxTreemapNodeStyleMappingComponent[];\r\n    private _styleMappings;\r\n    private _styleMappingsAdapter;\r\n    /**\r\n     * A collection or manually added axes for the chart.\r\n    */\r\n    readonly styleMappings: IgxTreemapNodeStyleMappingCollection;\r\n    private _wrapper;\r\n    private _root;\r\n    constructor(renderer: Renderer2, _elRef: ViewContainerRef, ngZone: NgZone, injector: Injector, componentFactoryResolver: ComponentFactoryResolver);\r\n    updateStyle(): void;\r\n    ngOnDestroy(): void;\r\n    private _implementation;\r\n    ngAfterContentInit(): void;\r\n    protected createImplementation(): Treemap;\r\n    readonly i: Treemap;\r\n    private _treeMap;\r\n    /**\r\n * Gets or sets path to use to get the values from the items.\r\n*/\r\n    valueMemberPath: string;\r\n    /**\r\n     * Gets or sets the root title to use for breadcrumbs.\r\n    */\r\n    rootTitle: string;\r\n    /**\r\n     * Gets or sets the root title to use for breadcrumbs.\r\n    */\r\n    breadcrumbSequence: string;\r\n    /**\r\n     * Gets or sets the path to use to get the Parent of the items.\r\n    */\r\n    parentIdMemberPath: string;\r\n    /**\r\n     * Gets or sets the path to use to get the Label of the items.\r\n    */\r\n    labelMemberPath: string;\r\n    /**\r\n     * Gets or sets the path to use to get the custom value of the items.\r\n    */\r\n    customValueMemberPath: string;\r\n    /**\r\n     * Gets or sets the path to use to get the id of the items.\r\n    */\r\n    idMemberPath: string;\r\n    /**\r\n     * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.\r\n    */\r\n    dataSource: any[];\r\n    /**\r\n     * Gets or sets brushes to use for the fill scale.\r\n    */\r\n    fillBrushes: string[];\r\n    /**\r\n     * Gets or sets mode to use for the fill scale.\r\n    */\r\n    fillScaleMode: TreemapFillScaleMode;\r\n    /**\r\n     * Gets or sets whether the fill scale is logarithmic.\r\n    */\r\n    isFillScaleLogarithmic: boolean;\r\n    /**\r\n     * Gets or sets the logarithm base to use if the fill scale is logarithmic.\r\n    */\r\n    fillScaleLogarithmBase: number;\r\n    /**\r\n     * Gets or sets the minimum value to use for the fill scale.\r\n    */\r\n    fillScaleMinimumValue: number;\r\n    /**\r\n     * Gets or sets the maximum value to use for the fill scale.\r\n    */\r\n    fillScaleMaximumValue: number;\r\n    /**\r\n     * Gets or sets the vertical fit mode to use for the node labels.\r\n    */\r\n    labelVerticalFitMode: TreemapLabelVerticalFitMode;\r\n    /**\r\n     * Gets or sets the horizontal fit mode to use for the node labels.\r\n    */\r\n    labelHorizontalFitMode: TreemapLabelHorizontalFitMode;\r\n    /**\r\n     * Gets or sets the background to use for the overlay header when it is hovered.\r\n    */\r\n    overlayHeaderHoverBackground: string;\r\n    /**\r\n     * Gets or sets the background to use for the header when it is hovered.\r\n    */\r\n    headerHoverBackground: string;\r\n    /**\r\n     * Gets or sets the background to use for the header.\r\n    */\r\n    headerBackground: string;\r\n    /**\r\n     * Gets or sets the background to use for the overlay header.\r\n    */\r\n    overlayHeaderBackground: string;\r\n    /**\r\n     * Gets or sets the text color to use for the header.\r\n    */\r\n    headerTextColor: string;\r\n    /**\r\n     * Gets or sets the dark text color to use for the header.\r\n    */\r\n    headerDarkTextColor: string;\r\n    /**\r\n     * Gets or sets the text color to use for the nodes.\r\n    */\r\n    textColor: string;\r\n    /**\r\n     * Gets or sets the dark text color to use for the nodes.\r\n    */\r\n    darkTextColor: string;\r\n    /**\r\n     * Gets or sets the text color to use for the header.\r\n    */\r\n    headerHoverTextColor: string;\r\n    /**\r\n     * Gets or sets the dark text color to use for the header when hovered.\r\n    */\r\n    headerHoverDarkTextColor: string;\r\n    /**\r\n     * Gets or sets the font to use for content nodes\r\n    */\r\n    textStyle: string;\r\n    /**\r\n     * Gets or sets the font to use for header nodes\r\n    */\r\n    headerTextStyle: string;\r\n    /**\r\n     * Gets or sets the font to use for header nodes\r\n    */\r\n    headerDisplayMode: TreemapHeaderDisplayMode;\r\n    /**\r\n     * Gets or sets the left margin to use for the header.\r\n    */\r\n    headerLabelLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the header.\r\n    */\r\n    headerLabelTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the header.\r\n    */\r\n    headerLabelRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the header.\r\n    */\r\n    headerLabelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left margin to use for the overlay header.\r\n    */\r\n    overlayHeaderLabelLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the overlay header.\r\n    */\r\n    overlayHeaderLabelTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the overlay header.\r\n    */\r\n    overlayHeaderLabelRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the overlay header.\r\n    */\r\n    overlayHeaderLabelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left margin to use for the labels.\r\n    */\r\n    labelLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the labels.\r\n    */\r\n    labelTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the labels.\r\n    */\r\n    labelRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the labels.\r\n    */\r\n    labelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left margin to use for the parent nodes.\r\n    */\r\n    parentNodeLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the parent nodes.\r\n    */\r\n    parentNodeTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the parent nodes.\r\n    */\r\n    parentNodeRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the parent nodes.\r\n    */\r\n    parentNodeBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left padding to use for the parent nodes.\r\n    */\r\n    parentNodeLeftPadding: number;\r\n    /**\r\n     * Gets or sets the top padding to use for the parent nodes.\r\n    */\r\n    parentNodeTopPadding: number;\r\n    /**\r\n     * Gets or sets the right padding to use for the parent nodes.\r\n    */\r\n    parentNodeRightPadding: number;\r\n    /**\r\n     * Gets or sets the bottom padding to use for the parent nodes.\r\n    */\r\n    parentNodeBottomPadding: number;\r\n    /**\r\n     * Gets or sets the horizontal alignment to use for the node labels.\r\n    */\r\n    labelHorizontalAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets the vertical alignment to use for the node labels.\r\n    */\r\n    labelVerticalAlignment: VerticalAlignment;\r\n    /**\r\n     * Gets or sets the height to use for the header.\r\n    */\r\n    headerHeight: number;\r\n    /**\r\n     * Gets or sets the outline to use for the nodes.\r\n    */\r\n    outline: string;\r\n    /**\r\n     * Gets or sets the stroke thickness to use for the node outline.\r\n    */\r\n    strokeThickness: number;\r\n    /**\r\n     * Gets or sets the orientation to use for the stripped and slice and dice layout types.\r\n    */\r\n    layoutOrientation: TreemapOrientation;\r\n    /**\r\n     * Gets or sets the type of layout to use for the nodes.\r\n    */\r\n    layoutType: TreemapLayoutType;\r\n    /**\r\n     * Gets or sets the minimum size (width or height) to display a node.\r\n    */\r\n    minimumDisplaySize: number;\r\n    /**\r\n     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\r\n    */\r\n    transitionDuration: number;\r\n    /**\r\n     * Gets or sets the scaling value used to affect the pixel density of the control.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    pixelScalingRatio: number;\r\n    actualPixelScalingRatio: number;\r\n    /**\r\n     * Gets or sets the scaling value used to affect the pixel density of the control while it is animating.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    interactionPixelScalingRatio: number;\r\n    /**\r\n     * Gets or sets the resolved scaling value used to affect the pixel density of the control while it is animating.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    actualInteractionPixelScalingRatio: number;\r\n    readonly animating: boolean;\r\n    /**\r\n     * Gets or sets the item to drill to in the treemap.\r\n    */\r\n    focusItem: any;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n * Returns visuals as a serialized string.\r\n\r\n*/\r\n    exportSerializedVisualData(): string;\r\n    markDirty(): void;\r\n    onDetachedFromUI(): void;\r\n    onAttachedToUI(): void;\r\n    flush(): void;\r\n    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;\r\n    /**\r\n     * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.\r\n     * This should not be called if the data that the pie chart is bound to is already observable.\r\n    \r\n    * @param source_  * The data source.\r\n    */\r\n    notifyClearItems(source_: any): void;\r\n    notifyInsertItem(source_: any, index: number, newItem: any): void;\r\n    notifyRemoveItem(source_: any, index: number, oldItem: any): void;\r\n    private _nodeStyling;\r\n    /**\r\n     * Fired when a node is being styled. Provides an opportunity to customize node styling.\r\n    */\r\n    readonly nodeStyling: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodeStylingEventArgs;\r\n    }>;\r\n    private _nodePointerOver;\r\n    /**\r\n     * Fired with the pointer is moving over a node.\r\n    */\r\n    readonly nodePointerOver: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodePointerEventArgs;\r\n    }>;\r\n    private _nodePointerEnter;\r\n    /**\r\n     * Fired when the pointer enters a node.\r\n    */\r\n    readonly nodePointerEnter: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodePointerEventArgs;\r\n    }>;\r\n    private _nodePointerLeave;\r\n    /**\r\n     * Fired when the pointer leaved a node.\r\n    */\r\n    readonly nodePointerLeave: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodePointerEventArgs;\r\n    }>;\r\n    private _nodePointerPressed;\r\n    /**\r\n     * Fired when the pointer is pressed on a node.\r\n    */\r\n    readonly nodePointerPressed: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodePointerEventArgs;\r\n    }>;\r\n    private _nodePointerReleased;\r\n    /**\r\n     * Fired when the pointer is released on a node.\r\n    */\r\n    readonly nodePointerReleased: EventEmitter<{\r\n        sender: any;\r\n        args: IgxTreemapNodePointerEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}