{"version":3,"file":"igx-time-x-axis-component.d.ts","sources":["igx-time-x-axis-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { IgxTimeAxisBreakCollection } from \"./igx-time-axis-break-collection\";\r\nimport { IgxTimeAxisLabelFormatCollection } from \"./igx-time-axis-label-format-collection\";\r\nimport { IgxTimeAxisIntervalCollection } from \"./igx-time-axis-interval-collection\";\r\nimport { IgxTimeAxisBaseComponent } from \"./igx-time-axis-base-component\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { TimeXAxis } from \"./TimeXAxis\";\r\n/**\r\n * A horizontal axis that uses a DateTime scale.\r\n*\r\n* The `IgxTimeXAxisComponent` is a horizontal axis that uses a DateTime scale.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"data\">\r\n*     <igx-time-x-axis\r\n* \t\tdateTimeMemberPath=\"date\"\r\n* \t\t#xAxis>\r\n*     </igx-time-x-axis>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let xAxis = new IgxTimeXAxisComponent();\r\n* xAxis.dataTimeMemberPath=\"date\";\r\n* this.chart.axes.add(xAxis);\r\n* ```\r\n*/\r\nexport declare const IgxTimeXAxisComponent_PROVIDERS: {\r\n    provide: typeof IgxAxisComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxTimeXAxisComponent extends IgxTimeAxisBaseComponent {\r\n    protected createImplementation(): TimeXAxis;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: TimeXAxis;\r\n    constructor();\r\n    readonly isPiecewise: boolean;\r\n    private _breaks;\r\n    /**\r\n     * TimeAxisBreaks to apply to this axis, representing spans of time to omit, such as weekends.\r\n    *\r\n    * The `breaks` to apply to this axis, representing spans of time to omit, such as weekends.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-time-x-axis\r\n    * \t\tdateTimeMemberPath=\"date\"\r\n    * \t\t#xAxis>\r\n    *     </igx-time-x-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let xAxis = new IgxTimeXAxisComponent();\r\n    * xAxis.dataTimeMemberPath=\"date\";\r\n    * this.chart.axes.add(xAxis);\r\n    * ```\r\n    */\r\n    breaks: IgxTimeAxisBreakCollection;\r\n    private _labelFormats;\r\n    /**\r\n     * A list of axis label formats to apply, which are selected according to the visible axis range.\r\n     * The label format selected will be the one with the largest range smaller than the visible range of the axis.\r\n    */\r\n    labelFormats: IgxTimeAxisLabelFormatCollection;\r\n    private _intervals;\r\n    /**\r\n     * A list of axis label intervals to apply, which are selected according to the visible axis range.\r\n     * The interval selected will be the one with the largest range smaller than the visible range of the axis.\r\n    */\r\n    intervals: IgxTimeAxisIntervalCollection;\r\n    /**\r\n     * Gets if the current axis is of category date time axis type\r\n    */\r\n    readonly isCategoryDateTime: boolean;\r\n    findByName(name: string): any;\r\n    getValueLabel(value: number): string;\r\n    /**\r\n     * Gets the index of the data item with the value nearest the given value.\r\n    \r\n    * @param unscaledValue  * The value to find a value close to.\r\n    */\r\n    getIndexClosestToUnscaledValue(unscaledValue: number): number;\r\n}\r\n"]}