{"version":3,"file":"igx-final-value-layer-component.d.ts","sources":["igx-final-value-layer-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { FinalValueSelectionMode } from \"./FinalValueSelectionMode\";\r\nimport { IgxAnnotationLayerComponent } from \"./igx-annotation-layer-component\";\r\nimport { FinalValueLayer } from \"./FinalValueLayer\";\r\n/**\r\n * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.\r\n*/\r\nexport declare const IgxFinalValueLayerComponent_PROVIDERS: ({\r\n    provide: typeof IgxAnnotationLayerComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare class IgxFinalValueLayerComponent extends IgxAnnotationLayerComponent {\r\n    protected createImplementation(): FinalValueLayer;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: FinalValueLayer;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.\r\n    */\r\n    targetSeries: IgxSeriesComponent;\r\n    /**\r\n     * Gets or sets how to select the final value to annotate.\r\n    */\r\n    finalValueSelectionMode: FinalValueSelectionMode;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationTextColor: string;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationBackground: string;\r\n    /**\r\n     * Gets or sets the precision to use displaying values for interpolated crosshair positions.\r\n    */\r\n    axisAnnotationInterpolatedValuePrecision: number;\r\n    /**\r\n     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationOutline: string;\r\n    /**\r\n     * Gets or sets the left padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingLeft: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingTop: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingRight: number;\r\n    /**\r\n     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    axisAnnotationPaddingBottom: number;\r\n    /**\r\n     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.\r\n    */\r\n    axisAnnotationStrokeThickness: number;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n}\r\n"]}