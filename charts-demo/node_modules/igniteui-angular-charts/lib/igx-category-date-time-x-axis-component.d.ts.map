{"version":3,"file":"igx-category-date-time-x-axis-component.d.ts","sources":["igx-category-date-time-x-axis-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { TimeAxisDisplayType } from \"./TimeAxisDisplayType\";\r\nimport { IgxTimeAxisBaseComponent } from \"./igx-time-axis-base-component\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { CategoryDateTimeXAxis } from \"./CategoryDateTimeXAxis\";\r\n/**\r\n * Represents a category-based horizontal X axis that uses a DateTime scale.\r\n*\r\n* `IgxCategoryDateTimeXAxisComponent` class represents a category-based horizontal X axis that uses a DateTime scale.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"data\">\r\n*     <igx-time-x-axis\r\n* \t\tdateTimeMemberPath=\"date\"\r\n* \t\t#xAxis>\r\n*     </igx-time-x-axis>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let xAxis = new IgxTimeXAxisComponent();\r\n* xAxis.dataTimeMemberPath=\"date\";\r\n* this.chart.axes.add(xAxis);\r\n* ```\r\n*/\r\nexport declare const IgxCategoryDateTimeXAxisComponent_PROVIDERS: {\r\n    provide: typeof IgxAxisComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxCategoryDateTimeXAxisComponent extends IgxTimeAxisBaseComponent {\r\n    protected createImplementation(): CategoryDateTimeXAxis;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: CategoryDateTimeXAxis;\r\n    constructor();\r\n    /**\r\n     * Gets if the current axis is a continuous rather than a discrete scale\r\n    */\r\n    readonly isContinuous: boolean;\r\n    /**\r\n     * Gets or sets the axis display type.\r\n     * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.\r\n     * Discrete display type will not use a constant interval, but will align each label with its data point.\r\n    *\r\n    * `displayType` property is used for axis display type.\r\n    *\r\n    * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-time-x-axis\r\n    * \t\tdateTimeMemberPath=\"date\"\r\n    * \t\tdisplayType =\"continuous\"\r\n    * \t\t#xAxis>\r\n    *     </igx-time-x-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    displayType: TimeAxisDisplayType;\r\n    /**\r\n     * Gets or sets the X axis time interval.\r\n    *\r\n    * `interval` property is used to get/sets the frequency of displayed labels.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\">\r\n    *     <igx-time-x-axis\r\n    * \t\tdateTimeMemberPath=\"date\"\r\n    * \t\tinterval=2\r\n    * \t\t#xAxis>\r\n    *     </igx-time-x-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    interval: number;\r\n    /**\r\n     * Gets the effective value for the current Interval.\r\n    */\r\n    actualInterval: number;\r\n    /**\r\n     * Gets or sets the frequency of displayed minor lines.\r\n     * The set value is a factor that determines how the minor lines will be displayed.\r\n    */\r\n    minorInterval: number;\r\n    /**\r\n     * Gets the effective value for the current MinorInterval.\r\n    */\r\n    actualMinorInterval: number;\r\n    /**\r\n     * Gets if the current axis is of category date time axis type\r\n    */\r\n    readonly isCategoryDateTime: boolean;\r\n    scrollIntoView(minimum: Date, maximum: Date): void;\r\n    private _actualIntervalChange;\r\n    readonly actualIntervalChange: EventEmitter<number>;\r\n    private _actualMinorIntervalChange;\r\n    readonly actualMinorIntervalChange: EventEmitter<number>;\r\n}\r\n"]}