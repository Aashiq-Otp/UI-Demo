{"version":3,"file":"igx-doughnut-chart-component.d.ts","sources":["igx-doughnut-chart-component.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, ViewContainerRef, NgZone, ComponentFactoryResolver, Renderer2, Injector, EventEmitter, QueryList } from '@angular/core';\r\nimport { XamDoughnutChart } from './XamDoughnutChart';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxSliceClickEventArgs } from \"./igx-slice-click-event-args\";\r\nimport { IgxHoleDimensionsChangedEventArgs } from \"./igx-hole-dimensions-changed-event-args\";\r\nimport { IgxRingSeriesBaseComponent } from \"./igx-ring-series-base-component\";\r\nimport { IgxRingSeriesCollection } from \"./igx-ring-series-collection\";\r\nexport declare const IgxDoughnutChartComponent_PROVIDERS: any[];\r\n/**\r\n * Represents concentric circles divided on arcs  depending on data.\r\n*/\r\nexport declare class IgxDoughnutChartComponent implements OnDestroy {\r\n    private renderer;\r\n    private _elRef;\r\n    private ngZone;\r\n    private injector;\r\n    private componentFactoryResolver;\r\n    container: Element;\r\n    contentSeries: QueryList<IgxRingSeriesBaseComponent>;\r\n    _dynamicContent: ViewContainerRef;\r\n    private _height;\r\n    private _width;\r\n    height: string;\r\n    width: string;\r\n    constructor(renderer: Renderer2, _elRef: ViewContainerRef, ngZone: NgZone, injector: Injector, componentFactoryResolver: ComponentFactoryResolver);\r\n    ngOnDestroy(): void;\r\n    private _wrapper;\r\n    private onImplementationCreated;\r\n    protected createImplementation(): XamDoughnutChart;\r\n    protected _implementation: any;\r\n    readonly i: XamDoughnutChart;\r\n    protected createSeriesComponent(type: string): any;\r\n    private _chart;\r\n    ngAfterContentInit(): void;\r\n    /**\r\n     * The series actually present in the chart. Do not directly modify this array.\r\n     * This array's contents can be modified by causing Angular to reproject the child content.\r\n     * Or adding and removing series from the manual series collection on the series property.\r\n     */\r\n    actualSeries: IgxRingSeriesBaseComponent[];\r\n    private _seriesAdapter;\r\n    private _series;\r\n    /**\r\n     * A collection or manually added series for the chart.\r\n    */\r\n    readonly series: IgxRingSeriesCollection;\r\n    private _ensureTooltipCreated;\r\n    private _defaultTooltips;\r\n    private _ensureDefaultTooltip;\r\n    private _onDefaultTooltipsReady;\r\n    private createTooltip;\r\n    /**\r\n * Gets or sets whether the slices can be selected.\r\n*/\r\n    allowSliceSelection: boolean;\r\n    /**\r\n     * Gets or sets whether all surface interactions with the plot area should be disabled.\r\n    */\r\n    isSurfaceInteractionDisabled: boolean;\r\n    /**\r\n     * Gets or sets whether the slices can be exploded.\r\n    */\r\n    allowSliceExplosion: boolean;\r\n    /**\r\n     * Gets or sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.\r\n    */\r\n    innerExtent: number;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    selectedSliceFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    selectedSliceStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    selectedSliceStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    selectedSliceOpacity: number;\r\n    ensureSelectedStyle(): void;\r\n    /**\r\n     * Gets or sets the scaling value used to affect the pixel density of the control.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    pixelScalingRatio: number;\r\n    /**\r\n     * Resolved pixel scaling ratio. Unless explicitly overridden by the IgxDoughnutChart.PixelScalingRatioComponent property,\r\n     * this one returns the default ratio enforced by device. High resolution devices will initialize this property\r\n     * to a higher value.\r\n    */\r\n    actualPixelScalingRatio: number;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n * Called by the UI framework to provide a UI container for rendering this control.\r\n\r\n* @param container  * The UI container element.\r\n*/\r\n    provideContainer(container: any): void;\r\n    /**\r\n     * Called when the control has been resized.\r\n    \r\n    */\r\n    notifyResized(): void;\r\n    /**\r\n     * Gets the ID of the UI container.\r\n    \r\n    */\r\n    getContainerID(): string;\r\n    /**\r\n     * Gets the center coordinates of the doughnut chart's center presenter.\r\n    \r\n    */\r\n    getCenterCoordinates(): IgPoint;\r\n    /**\r\n     * Gets the hole radius of the doughnut chart's center presenter.\r\n    \r\n    */\r\n    getHoleRadius(): number;\r\n    /**\r\n     * Use to force the doughnut chart to finish any deferred work before printing or evaluating its visual.\r\n     * This should only be called if the visual of the doughnut chart needs to be synchronously saved or evaluated.\r\n     * Calling this method too often will hinder the performance of the doughnut chart.\r\n    \r\n    */\r\n    flush(): void;\r\n    /**\r\n     * Returns the chart visuals expressed as a serialized string.\r\n    \r\n    */\r\n    exportSerializedVisualData(): string;\r\n    notifyInsertItem(source_: any, index: number, newItem: any): void;\r\n    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;\r\n    /**\r\n     * Used to manually notify the chart that the data source has reset or cleared its items.\r\n    \r\n    */\r\n    notifyClearItems(source_: any): void;\r\n    notifyRemoveItem(source_: any, index: number, oldItem: any): void;\r\n    private _sliceClick;\r\n    /**\r\n     * Raised when the slice is clicked.\r\n    */\r\n    readonly sliceClick: EventEmitter<{\r\n        sender: any;\r\n        args: IgxSliceClickEventArgs;\r\n    }>;\r\n    private _holeDimensionsChanged;\r\n    /**\r\n     * Raised when the dimensions (center point or radius) of the doughnut hole change.\r\n    */\r\n    readonly holeDimensionsChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxHoleDimensionsChangedEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}