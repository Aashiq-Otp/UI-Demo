{"version":3,"file":"igx-domain-chart-component.d.ts","sources":["igx-domain-chart-component.d.ts"],"names":[],"mappingssourcesContent":["import { TemplateRef, EventEmitter, OnInit } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { HorizontalAlignment } from \"igniteui-angular-core\";\r\nimport { UnknownValuePlotting } from \"igniteui-angular-core\";\r\nimport { TrendLineType } from \"igniteui-angular-core\";\r\nimport { IgxChartSeriesEventArgs } from './igx-chart-series-event-args';\r\nimport { DomainChart } from \"./DomainChart\";\r\nimport { IgxDomainChartSeriesPointerEventArgs } from './igx-domain-chart-series-pointer-event-args';\r\nimport { IgxMarkerTypeCollection } from './igx-marker-type-collection';\r\nimport { ToolTipType } from \"./ToolTipType\";\r\nimport { CrosshairsDisplayMode } from \"./CrosshairsDisplayMode\";\r\nimport { IgxCalloutStyleUpdatingEventArgs } from \"./igx-callout-style-updating-event-args\";\r\nexport declare const IgxDomainChartComponent_PROVIDERS: any[];\r\nexport declare abstract class IgxDomainChartComponent implements OnInit {\r\n    protected createImplementation(): DomainChart;\r\n    ngOnInit(): void;\r\n    protected _implementation: any;\r\n    readonly i: DomainChart;\r\n    protected onImplementationCreated(): void;\r\n    constructor();\r\n    /**\r\n    * Sets or gets the template reference to use for tooltips for all the series.\r\n    *\r\n    *\r\n    */\r\n    tooltipTemplate: TemplateRef<any>;\r\n    /**\r\n    * Sets or gets the template references to use for tooltips for all the series, in order.\r\n    *\r\n    *\r\n    */\r\n    tooltipTemplates: TemplateRef<any>[];\r\n    legend: any;\r\n    private _calloutsDataSource;\r\n    calloutsDataSource: Array<any>;\r\n    bindCalloutsData(): void;\r\n    /**\r\n * Gets or sets the scaling value used to affect the pixel density of the control.\r\n * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n * to appear blurry.\r\n*/\r\n    pixelScalingRatio: number;\r\n    /**\r\n     * Gets or sets the left margin of chart title\r\n    *\r\n    *  Use `titleLeftMargin` property for the left margin of chart title.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    * \ttitleLeftMargin= 10>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.titleLeftMargin = 10;\r\n    * ```\r\n    */\r\n    titleLeftMargin: number;\r\n    /**\r\n     * Gets or sets the right margin of chart title\r\n    *\r\n    *  Use `titleLeftMargin` property for the right margin of chart title.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    * \t\tyAxisMinimumValue=\"0\"\r\n    * \t\t[dataSource]=\"data\"\r\n    * \t\ttitleRightMargin= 10>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.titleRightMargin = 10;\r\n    * ```\r\n    */\r\n    titleRightMargin: number;\r\n    /**\r\n     * Gets or sets the top margin of chart title\r\n    *\r\n    *  Use `titleTopMargin` property for the top margin of chart title.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *      yAxisMinimumValue=\"0\"\r\n    *      [dataSource]=\"data\"\r\n    *      title=\"Countries\"\r\n    *      titleTopMargin=10 >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.titleTopMargin = 10;\r\n    * ```\r\n    */\r\n    titleTopMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin of chart title\r\n    *\r\n    *  Use `titleBottomMargin` property for the bottom margin of chart title.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *    yAxisMinimumValue=\"0\"\r\n    *    [dataSource]=\"data\"\r\n    *    titleBottomMargin= 10 >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.titleBottomMargin = 5;\r\n    * ```\r\n    */\r\n    titleBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left margin of chart subtitle\r\n    *\r\n    * Use `subtitleLeftMargin` property for the left margin of chart subtitle.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     subtitleLeftMargin= 20>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleLeftMargin = 20 ;\r\n    * ```\r\n    */\r\n    subtitleLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin of chart subtitle\r\n    *\r\n    * Use `subtitleTopMargin` property for the top margin of chart subtitle.\r\n    *\r\n    * ```html\r\n    *    <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       subtitle= \"This is a subtitle\"\r\n    *       subtitleTopMargin=10>\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleTopMargin = 10;\r\n    * ```\r\n    */\r\n    subtitleTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin of chart subtitle\r\n    *\r\n    * Use `subtitleRightMargin` property for the right margin of chart subtitle.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     subtitleRightMargin= 10>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.subtitleRightMargin = 20 ;\r\n    * ```\r\n    */\r\n    subtitleRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin of chart subtitle\r\n    *\r\n    * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    * \tsubtitleBottomMargin=10>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleBottomMargin = 10 ;\r\n    * ```\r\n    */\r\n    subtitleBottomMargin: number;\r\n    /**\r\n     * Gets or sets color of chart subtitle\r\n    *\r\n    * Use `subtitleTextColor` property to color the subtitle.\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       subtitle= \"This is a subtitle\"\r\n    *       subtitleTextColor= 'blue'>\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleTextColor = \"#ff0000\" ;\r\n    * ```\r\n    */\r\n    subtitleTextColor: string;\r\n    /**\r\n     * Gets or sets color of chart title\r\n    *\r\n    *  Use `titleTextColor` property to color the chart title\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       titleTextColor= \"red\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.titleTextColor=\"red\" ;\r\n    * ```\r\n    */\r\n    titleTextColor: string;\r\n    /**\r\n     * Gets or sets the left margin of the chart content.\r\n    *\r\n    * Use the 'leftMargin' property for the left margin of the chart content.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       leftMargin=20>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.leftMargin = 20;\r\n    * ```\r\n    */\r\n    leftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin of the chart content.\r\n    *\r\n    * Use `topMargin` property for the margin of the chart content.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     topMargin= 20>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.topMargin=20;\r\n    * ```\r\n    */\r\n    topMargin: number;\r\n    /**\r\n     * Gets or sets the right margin of the chart content.\r\n    *\r\n    * Use `rightMargin` property for the right margin of the chart content.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     rightMargin=20>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *   this.chart.rightMargin = 20 ;\r\n    * ```\r\n    */\r\n    rightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin around the chart content.\r\n    *\r\n    * Use the `bottomMargin` property for the bottom margin around the chart content.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       bottomMargin= 20>\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.bottomMargin=20;\r\n    * ```\r\n    */\r\n    bottomMargin: number;\r\n    /**\r\n     * Gets or sets the duration used for animating series plots when the data is changing\r\n    *\r\n    * Use the `transitionDuration` property to animating between data values.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     transitionDuration=\"500\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.transitionDuratio= 500;\r\n    * ```\r\n    */\r\n    transitionDuration: number;\r\n    /**\r\n     * Gets or sets the easing function used for animating series plots when the data is changing.\r\n     * This can be set to one of the known values \"linear\" or \"cubic,\" or it can be set to an easing function which takes a single numeric parameter and returns a number.\r\n    *\r\n    * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     transitionInEasingFunction= \"cubic\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.transitionInEasingFunction=  this.cubicFunc;\r\n    *\r\n    * cubicFunc(time: number) : number\r\n    *   {\r\n    *     return time;\r\n    *   }\r\n    * ```\r\n    */\r\n    transitionEasingFunction: (time: number) => number;\r\n    /**\r\n     * Gets or sets CSS font property for the chart subtitle\r\n    *\r\n    * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       subtitle= \"This is a subtitle\"\r\n    *       subtitleTextStyle =\"16pt Verdona\">\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleTextStyle= \"16pt Verdona\";\r\n    * ```\r\n    */\r\n    subtitleTextStyle: string;\r\n    /**\r\n     * Gets or sets CSS font property for the chart title\r\n    *\r\n    * Use `titleTextStyle` property for the CSS font property of the chart title\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       titleTextStyle= \"24pt Verdona\">\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.xAxisTitleTextStyle = \"24pt Verdona\";\r\n    * ```\r\n    */\r\n    titleTextStyle: string;\r\n    /**\r\n     * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.\r\n    *\r\n    * The `includedProperties` property used to include the properties for the consideration of the category chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     includedProperties=\"ProductName,Cost\" >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.includedProperties = [\"ProductName\", \"Cost\"];\r\n    * ```\r\n    */\r\n    includedProperties: string[];\r\n    /**\r\n     * Gets or sets a set of property paths that should be excluded from consideration by the category chart.\r\n    *\r\n    * The `excludedProperties` property used for the property paths that should be excluded from consideration by the category chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     excludedProperties=\"ID\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.excludedProperties = [\"ID\", \"Discount\"];\r\n    * ```\r\n    */\r\n    excludedProperties: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes to use for coloring the chart series.\r\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\r\n    *\r\n    * Use the `brushes` property to  set the brushes.\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       Brushes=\"#ff0000, #cc0000, #aa0000\">\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.brushes = [\"#ff0000\",\"#00ff00\"];\r\n    * ```\r\n    */\r\n    brushes: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes to use for outlines on the chart series.\r\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\r\n    *\r\n    *  Use the `outlines` property to sets the palette of brushes to use for outlines on the chart series\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     outlines=\"#ff0000, #cc0000, #aa0000\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    */\r\n    outlines: string[];\r\n    /**\r\n     * Gets or sets whether the chart can be horizontally zoomed through user interactions.\r\n    *\r\n    * Use the `isHorizontalZoomEnabled` property to allow chart horizontally zoomed .\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       isHorizontalZoomEnabled=true>\r\n    *   </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.isHorizontalZoomEnabled = true;\r\n    * ```\r\n    */\r\n    isHorizontalZoomEnabled: boolean;\r\n    /**\r\n     * Gets or sets whether the chart can be vertically zoomed through user interactions.\r\n    *\r\n    * Use the `isVerticalZoomEnabled` property to allow chart zoom vertically.\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       isVerticalZoomEnabled=true>\r\n    *     </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.isVerticalZoomEnabled = true;\r\n    * ```\r\n    */\r\n    isVerticalZoomEnabled: boolean;\r\n    /**\r\n     * Gets or sets whether the chart can highlight series through user interactions.\r\n     * This property applies to Category Chart and Financial Chart controls.\r\n    */\r\n    isSeriesHighlightingEnabled: boolean;\r\n    /**\r\n     * Gets or sets the rectangle representing the current scroll and zoom state of the chart.\r\n     * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.\r\n    *\r\n    * Use `windowRect` property representing the current scroll and zoom state of the chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       WindowRect=[0,0,1,1]>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.windowRect =[0,0,1,1];\r\n    * ```\r\n    */\r\n    windowRect: IgRect;\r\n    /**\r\n     * Gets a rectangle representing the bounds of the plot area.\r\n    *\r\n    * `viewport` property representing the bounds of the plot area.\r\n    *\r\n    * ```ts\r\n    * let viewport:Rect =  this.chart.viewport;\r\n    * ```\r\n    */\r\n    readonly viewport: IgRect;\r\n    /**\r\n     * Gets or sets text to display above the plot area.\r\n    *\r\n    * Use the `chartTitle` property to display the text above the plot area.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     title=\"This is a Title\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.title= \"This is a Title\";\r\n    * ```\r\n    */\r\n    chartTitle: string;\r\n    /**\r\n     * Gets or sets text to display below the Title, above the plot area.\r\n    *\r\n    * Use the `subtitle` property to display the text below  and above the plot area.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     subtitle= \"This is a subtitle\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.subtitle =\"CategoryChart Subtitle\" ;\r\n    * ```\r\n    */\r\n    subtitle: string;\r\n    /**\r\n     * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.\r\n    *\r\n    * Use the `titleAlignment` property for the horizontal alignment of the title.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     titleAlignment= \"center\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.titleAlignment = HorizontalAlignment.Center;\r\n    * ```\r\n    */\r\n    titleAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.\r\n    *\r\n    * Use the `subtitleAlignment` property to Gets or sets horizontal alignment.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     subtitleAlignment= \"center\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.subtitleAlignment = HorizontalAlignment.Right;\r\n    * ```\r\n    */\r\n    subtitleAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets the behavior that determines how unknown values will be plotted on the chart.\r\n     * Null and Double.NaN are two examples of unknown values.\r\n    *\r\n    * Use the `unknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       unknownValuePlotting= \"dontPlot\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;\r\n    * ```\r\n    */\r\n    unknownValuePlotting: UnknownValuePlotting;\r\n    /**\r\n     * Gets or sets the rendering resolution for all series in this chart.\r\n     * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.\r\n    *\r\n    * Use the `resolution` property if the callouts should be display.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     resolution= 2>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *   this.chart.resolution = 2 ;\r\n    * ```\r\n    */\r\n    resolution: number;\r\n    /**\r\n     * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.\r\n    *\r\n    * Use the `thickness` property for the thickness of all the series in this chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     thickness=5>\r\n    * </igx-category-chart>\r\n    * ```\r\n    */\r\n    thickness: number;\r\n    private _markerTypes;\r\n    /**\r\n     * Gets or sets the marker shapes used for indicating location of data points in this chart.\r\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\r\n    */\r\n    markerTypes: IgxMarkerTypeCollection;\r\n    /**\r\n     * Gets or sets the palette of brushes used for rendering fill area of data point markers.\r\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\r\n    *\r\n    * `markerBrushes` property used for rendering fill area of data point markers.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     markerBrushes=\"#ff0000, #cc0000, #aa0000\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.markerBrushes=[ \"#ff0000\", \"#ffff00\", \"#00ffff\" ];\r\n    * ```\r\n    */\r\n    markerBrushes: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes used for rendering outlines of data point markers.\r\n     * This property applies only to these chart types: point, line, spline, bubble, and polygon\r\n    *\r\n    * `markerOutlines` property used for rendering outlines of data point markers.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     markerOutlines=\"#ff0000, #cc0000, #aa0000\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.markerOutlines= [\"#ff0000\", \"#ffff00\", \"#00ffff\"] ;\r\n    * ```\r\n    */\r\n    markerOutlines: string[];\r\n    /**\r\n     * Gets or sets the maximum number of markers displyed in the plot area of the chart.\r\n    *\r\n    * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     markerMaxCount=100 >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.markerMaxCount = 100 ;\r\n    * ```\r\n    */\r\n    markerMaxCount: number;\r\n    /**\r\n     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.\r\n    */\r\n    animateSeriesWhenAxisRangeChanges: boolean;\r\n    /**\r\n     * Gets or sets the palette of brushes to used for coloring trend lines in this chart.\r\n     * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection\r\n    *\r\n    * Use the `trendLineBrushes` property for coloring trend lines in the chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     trendLineBrushes=\"#ff0000,#aa0000\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.trendLineBrushes=[\"#ff0000\", \"#ffff00\", \"#00ffff\"]\t;\r\n    * ```\r\n    */\r\n    trendLineBrushes: string[];\r\n    /**\r\n     * Gets or sets the formula used for calculating trend lines in this chart.\r\n     * This property applies only to these chart types: point, line, spline, and bubble\r\n    *\r\n    * Use the `trendLineType` property for calculating trend lines.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       trendLineType= \"cubicFit\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.trendLineType = TrendLineType.CubicFit;\r\n    * ```\r\n    */\r\n    trendLineType: TrendLineType;\r\n    /**\r\n     * Gets or sets the thickness of the trend lines in this chart.\r\n     * This property applies only to these chart types: point, line, spline, and bubble\r\n    *\r\n    * Use the `trendLineThickness` property for the thickness of the trend lines in the chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     yAxisMinimumValue=\"0\"\r\n    *     [dataSource]=\"data\"\r\n    *     trendLineThickness= 2>\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.trendLineThickness=2;\r\n    * ```\r\n    */\r\n    trendLineThickness: number;\r\n    /**\r\n     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\r\n    *\r\n    * Use `alignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *     [dataSource]=\"data\"\r\n    *     AlignsGridLinesToPixels=\"true\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  this.chart.alignsGridLinesToPixels= true;\r\n    * ```\r\n    */\r\n    alignsGridLinesToPixels: boolean;\r\n    trendLinePeriod: number;\r\n    /**\r\n     * Gets or sets the style of tooltip to be displayed.\r\n    */\r\n    toolTipType: ToolTipType;\r\n    /**\r\n     * Gets or sets the crosshairs to be displayed.\r\n    */\r\n    crosshairsDisplayMode: CrosshairsDisplayMode;\r\n    /**\r\n     * Gets or sets whether crosshairs will snap to the nearest data point.\r\n    */\r\n    crosshairsSnapToData: boolean;\r\n    /**\r\n     * Gets or sets whether annotations are shown along the axis for crosshair values\r\n    */\r\n    crosshairsAnnotationEnabled: boolean;\r\n    /**\r\n     * Gets or sets whether annotations for the final value of each series is displayed on the axis.\r\n    */\r\n    finalValueAnnotationsVisible: boolean;\r\n    /**\r\n     * Gets or sets if callouts should be displayed.\r\n    */\r\n    calloutsVisible: boolean;\r\n    /**\r\n     * Gets or sets if event annotations should be displayed.\r\n    */\r\n    calloutStyleUpdatingEventEnabled: boolean;\r\n    /**\r\n     * Gets or sets the member path of the X data for the callouts.\r\n    */\r\n    calloutsXMemberPath: string;\r\n    /**\r\n     * Gets or sets the member path of the Y data for the callouts.\r\n    */\r\n    calloutsYMemberPath: string;\r\n    /**\r\n     * Gets or sets the member path of the label data for the callouts.\r\n    */\r\n    calloutsLabelMemberPath: string;\r\n    /**\r\n     * Gets or sets the member path of the content data for the callouts.\r\n    */\r\n    calloutsContentMemberPath: string;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n * Provides a container for this control\r\n\r\n*\r\n* `provideContainer` method provide container for the control.\r\n*\r\n* ```ts\r\n*     this.chart.provideContainer(\"Container\");\r\n* ```\r\n*/\r\n    provideContainer(container: any): void;\r\n    /**\r\n     * Destroy this control\r\n    \r\n    *\r\n    * Use the `destroy` property to destroy the chart.\r\n    *\r\n    * ```ts\r\n    * this.chart.destroy();\r\n    * ```\r\n    */\r\n    destroy(): void;\r\n    /**\r\n     * Called when the control has been resized.\r\n    \r\n    *\r\n    * `notifyResized` method Called when the control has been resized.\r\n    *\r\n    * ```ts\r\n    * this.chart.notifyResized();\r\n    * ```\r\n    */\r\n    notifyResized(): void;\r\n    notifyVisualPropertiesChanged(): void;\r\n    /**\r\n     * Forces any pending refresh to the chart to be finished.\r\n    \r\n    *\r\n    * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.\r\n    *\r\n    * ```ts\r\n    * this.chart.flush();\r\n    * ```\r\n    */\r\n    flush(): void;\r\n    /**\r\n     * Hides the active main tooltip, if displayed.\r\n    \r\n    *\r\n    * Use the `hideToolTip` method to hide the active tooltip.\r\n    *\r\n    * ```ts\r\n    * this.chart.hideToolTip();\r\n    * ```\r\n    */\r\n    hideToolTip(): void;\r\n    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;\r\n    /**\r\n     * Used to manually notify the chart that the data source has reset or cleared its items.\r\n    \r\n    *\r\n    * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.\r\n    *\r\n    * ```ts\r\n    * this.chart.notifyClearItems(this.data);\r\n    * ```\r\n    */\r\n    notifyClearItems(source_: any): void;\r\n    notifyInsertItem(source_: any, index: number, newItem: any): void;\r\n    notifyRemoveItem(source_: any, index: number, oldItem: any): void;\r\n    private _seriesAdded;\r\n    /**\r\n     * Event raised when a series is initialized and added to this chart.\r\n    *\r\n    * `SeriesAdded` event raised when a series is initialized and added to this chart.\r\n    *\r\n    * ```html\r\n    *  <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesAdded)=\"CategoryChart_SeriesAdded()\"\r\n    *      >\r\n    * </igx-category-chart>\r\n    * ```\r\n    */\r\n    readonly seriesAdded: EventEmitter<{\r\n        sender: any;\r\n        args: IgxChartSeriesEventArgs;\r\n    }>;\r\n    private _seriesRemoved;\r\n    /**\r\n     * Event raised when a series is removed from this chart.\r\n    *\r\n    * `SeriesRemoved` event raised when a series is removed from this chart.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesRemoved)=\"CategoryChart_seriesRemoved()\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly seriesRemoved: EventEmitter<{\r\n        sender: any;\r\n        args: IgxChartSeriesEventArgs;\r\n    }>;\r\n    private _seriesPointerEnter;\r\n    /**\r\n     * Occurs when the pointer enters a Series.\r\n    *\r\n    * `SeriesPointerEnter` event raised when the pointer enters a Series.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesPointerEnter)=\"CategoryChart_seriesPointerEnter()\" >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly seriesPointerEnter: EventEmitter<{\r\n        sender: any;\r\n        args: IgxDomainChartSeriesPointerEventArgs;\r\n    }>;\r\n    private _seriesPointerLeave;\r\n    /**\r\n     * Occurs when the pointer leaves a Series.\r\n    *\r\n    * `SeriesPointerLeave` event raised when the pointer leaves a Series.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesPointerLeave)= \"CategoryChart_seriesPointerLeave()\" >\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly seriesPointerLeave: EventEmitter<{\r\n        sender: any;\r\n        args: IgxDomainChartSeriesPointerEventArgs;\r\n    }>;\r\n    private _seriesPointerMove;\r\n    /**\r\n     * Occurs when the pointer moves over a Series.\r\n    *\r\n    * `SeriesPointerMove` event raised when the pointer moves over a Series.\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *        (seriesPointerMove)=\"CategoryChart_seriesPointerMove()\">\r\n    * </igx-category-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly seriesPointerMove: EventEmitter<{\r\n        sender: any;\r\n        args: IgxDomainChartSeriesPointerEventArgs;\r\n    }>;\r\n    private _seriesPointerDown;\r\n    /**\r\n     * Occurs when the pointer is pressed down over a Series.\r\n    *\r\n    * `SeriesPointerDown` event raised when the pointer is pressed down over a Series\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesPointerDown)=\"CategoryChart_seriesPointerDown()\" >\r\n    * </igx-category-chart>\r\n    * ```\r\n    */\r\n    readonly seriesPointerDown: EventEmitter<{\r\n        sender: any;\r\n        args: IgxDomainChartSeriesPointerEventArgs;\r\n    }>;\r\n    private _seriesPointerUp;\r\n    /**\r\n     * Occurs when the pointer is released over a Series.\r\n    *\r\n    * `SeriesPointerUp` event raised when the pointer is released over a Series.\r\n    *\r\n    * ```ts\r\n    *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    *\r\n    * ```html\r\n    * <igx-category-chart\r\n    *       yAxisMinimumValue=\"0\"\r\n    *       [dataSource]=\"data\"\r\n    *       (seriesPointerUp)=\"CategoryChart_seriesPointerUp()\" >\r\n    * </igx-category-chart>\r\n    * ```\r\n    */\r\n    readonly seriesPointerUp: EventEmitter<{\r\n        sender: any;\r\n        args: IgxDomainChartSeriesPointerEventArgs;\r\n    }>;\r\n    private _calloutStyleUpdating;\r\n    /**\r\n     * Occurs when the style of a callout is updated.\r\n    */\r\n    readonly calloutStyleUpdating: EventEmitter<{\r\n        sender: any;\r\n        args: IgxCalloutStyleUpdatingEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}