{"version":3,"file":"igx-treemap-node-style-component.d.ts","sources":["igx-treemap-node-style-component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit } from '@angular/core';\r\nimport { HorizontalAlignment } from \"igniteui-angular-core\";\r\nimport { VerticalAlignment } from \"igniteui-angular-core\";\r\nimport { TreemapNodeStyle } from \"./TreemapNodeStyle\";\r\n/**\r\n * Represents a style to apply to a treemap node.\r\n*/\r\nexport declare const IgxTreemapNodeStyleComponent_PROVIDERS: any[];\r\nexport declare class IgxTreemapNodeStyleComponent implements OnInit {\r\n    protected createImplementation(): TreemapNodeStyle;\r\n    ngOnInit(): void;\r\n    protected _implementation: any;\r\n    /**\r\n     * @hidden\r\n     */\r\n    readonly i: TreemapNodeStyle; /**\r\n                                 * @hidden\r\n                                 */\r\n    static _createFromInternal(internal: any): IgxTreemapNodeStyleComponent;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the background to use for the header when it is hovered.\r\n    */\r\n    headerHoverBackground: string;\r\n    /**\r\n     * Gets or sets the background to use for the header.\r\n    */\r\n    headerBackground: string;\r\n    /**\r\n     * Gets or sets the text color to use for the header.\r\n    */\r\n    headerTextColor: string;\r\n    /**\r\n     * Gets or sets the label to use for the node.\r\n    */\r\n    label: string;\r\n    /**\r\n     * Gets or sets the text color to use for the nodes.\r\n    */\r\n    textColor: string;\r\n    /**\r\n     * Gets or sets the text color to use for the header.\r\n    */\r\n    headerHoverTextColor: string;\r\n    /**\r\n     * Gets or sets the left margin to use for the header.\r\n    */\r\n    headerLabelLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the header.\r\n    */\r\n    headerLabelTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the header.\r\n    */\r\n    headerLabelRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the labels.\r\n    */\r\n    headerLabelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the left margin to use for the labels.\r\n    */\r\n    labelLeftMargin: number;\r\n    /**\r\n     * Gets or sets the top margin to use for the labels.\r\n    */\r\n    labelTopMargin: number;\r\n    /**\r\n     * Gets or sets the right margin to use for the labels.\r\n    */\r\n    labelRightMargin: number;\r\n    /**\r\n     * Gets or sets the bottom margin to use for the labels.\r\n    */\r\n    labelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the height to use for the header.\r\n    */\r\n    headerHeight: number;\r\n    /**\r\n     * Gets or sets the horizontal alignment to use for the node labels.\r\n    */\r\n    labelHorizontalAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets the vertical alignment to use for the node labels.\r\n    */\r\n    labelVerticalAlignment: VerticalAlignment;\r\n    /**\r\n     * Gets or sets the fill color to use for the nodes.\r\n    */\r\n    fill: string;\r\n    /**\r\n     * Gets or sets the outline to use for the nodes.\r\n    */\r\n    outline: string;\r\n    /**\r\n     * Gets or sets the stroke thickness to use for the node outline.\r\n    */\r\n    strokeThickness: number;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n}\r\n"]}