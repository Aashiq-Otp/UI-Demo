{"version":3,"file":"igx-high-density-scatter-series-component.d.ts","sources":["igx-high-density-scatter-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxNumericXAxisComponent } from \"./igx-numeric-x-axis-component\";\r\nimport { IgxNumericYAxisComponent } from \"./igx-numeric-y-axis-component\";\r\nimport { IgxProgressiveLoadStatusEventArgs } from \"./igx-progressive-load-status-event-args\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { HighDensityScatterSeries } from \"./HighDensityScatterSeries\";\r\n/**\r\n * Represents a IgxDataChartComponent series where a high volume of scatter points can be displayed.\r\n*/\r\nexport declare const IgxHighDensityScatterSeriesComponent_PROVIDERS: {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxHighDensityScatterSeriesComponent extends IgxSeriesComponent {\r\n    protected createImplementation(): HighDensityScatterSeries;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: HighDensityScatterSeries;\r\n    constructor();\r\n    /**\r\n     * Checks if this series is a scatter series\r\n    */\r\n    readonly isScatter: boolean;\r\n    /**\r\n     * Gets or sets the effective x-axis for the current object.\r\n    */\r\n    xAxis: IgxNumericXAxisComponent;\r\n    /**\r\n     * Gets or sets the effective y-axis for the current object.\r\n    */\r\n    yAxis: IgxNumericYAxisComponent;\r\n    /**\r\n     * Gets or sets the x value mapping property for the current series object.\r\n    */\r\n    xMemberPath: string;\r\n    /**\r\n     * Gets or sets the y value mapping property for the current series object.\r\n    */\r\n    yMemberPath: string;\r\n    /**\r\n     * Gets or sets the whether to use use brute force mode.\r\n    */\r\n    useBruteForce: boolean;\r\n    /**\r\n     * Gets or sets the whether to progressively load the data into the chart.\r\n    */\r\n    progressiveLoad: boolean;\r\n    /**\r\n     * Gets or sets the density value that maps to the minimum heat color.\r\n    */\r\n    heatMinimum: number;\r\n    /**\r\n     * Gets or sets the value that maps to the maximum heat color.\r\n    */\r\n    heatMaximum: number;\r\n    /**\r\n     * Gets or sets the color to use for the minimum end of the scale.\r\n    */\r\n    heatMinimumColor: string;\r\n    /**\r\n     * Gets or sets the color to use for the maximum end of the scale.\r\n    */\r\n    heatMaximumColor: string;\r\n    /**\r\n     * Gets or sets the the pixel extent of the square data points that are rendered.\r\n    */\r\n    pointExtent: number;\r\n    /**\r\n     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.\r\n    */\r\n    progressiveStatus: number;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Determine if object can be used as YAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsYAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as XAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsXAxis(axis: any): boolean;\r\n    /**\r\n     * Scrolls the series to display the item for the specified data item.\r\n     * The series is scrolled by the minimum amount required to place the specified data item within\r\n     * the central 80% of the visible axis.\r\n    \r\n    * @param item  * The data item (item) to scroll to.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    private _progressiveLoadStatusChanged;\r\n    /**\r\n     * Raised when the progressive loading state of the series has changed.\r\n    */\r\n    readonly progressiveLoadStatusChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxProgressiveLoadStatusEventArgs;\r\n    }>;\r\n}\r\n"]}