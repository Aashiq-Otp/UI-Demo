{"version":3,"file":"igx-stacked-fragment-series-component.d.ts","sources":["igx-stacked-fragment-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { IgDataTemplate } from \"igniteui-angular-core\";\r\nimport { Visibility } from \"igniteui-angular-core\";\r\nimport { MarkerType } from \"./MarkerType\";\r\nimport { IgxPropertyUpdatedEventArgs } from \"igniteui-angular-core\";\r\nimport { StackedFragmentSeries } from \"./StackedFragmentSeries\";\r\n/**\r\n * Represents a non-visual child of StackedSeriesBase.\r\n*/\r\nexport declare const IgxStackedFragmentSeriesComponent_PROVIDERS: any[];\r\nexport declare class IgxStackedFragmentSeriesComponent implements OnInit {\r\n    protected createImplementation(): StackedFragmentSeries;\r\n    ngOnInit(): void;\r\n    protected _implementation: any;\r\n    /**\r\n     * @hidden\r\n     */\r\n    readonly i: StackedFragmentSeries; /**\r\n                                 * @hidden\r\n                                 */\r\n    static _createFromInternal(internal: any): IgxStackedFragmentSeriesComponent;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the brush of the stacked fragment.\r\n    */\r\n    brush: string;\r\n    /**\r\n     * Gets the actual brush used by the series.\r\n    */\r\n    actualBrush: string;\r\n    /**\r\n     * Gets or sets whether drop shadow should be enabled for this series.\r\n    */\r\n    isDropShadowEnabled: boolean;\r\n    /**\r\n     * Gets whether drop shadow is actually enabled for this series.\r\n    */\r\n    actualIsDropShadowEnabled: boolean;\r\n    /**\r\n     * Gets or sets the shadow blur.\r\n     * This property is ignored when StackedFragmentSeries.UseSingleShadow is set to true.\r\n    */\r\n    shadowBlur: number;\r\n    /**\r\n     * Gets the actual shadow blur used by the series.\r\n    */\r\n    actualShadowBlur: number;\r\n    /**\r\n     * Gets or sets the drop shadow color.\r\n    */\r\n    shadowColor: string;\r\n    /**\r\n     * Gets actual the drop shadow color used by the series.\r\n    */\r\n    actualShadowColor: string;\r\n    /**\r\n     * Gets or sets whether drop shadow is applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\r\n     * When this property is set to true, no StackedFragmentSeries.ShadowBlur is applied.\r\n    */\r\n    useSingleShadow: boolean;\r\n    /**\r\n     * Gets whether drop shadow is actually applied to the whole StackedFragmentSeries visual or to each of the individual shapes forming the StackedFragmentSeries.\r\n    */\r\n    actualUseSingleShadow: boolean;\r\n    /**\r\n     * Gets or sets the drop shadow x-offset.\r\n    */\r\n    shadowOffsetX: number;\r\n    /**\r\n     * Gets the actual drop shadow x-offset applied to the series.\r\n    */\r\n    actualShadowOffsetX: number;\r\n    /**\r\n     * Gets or sets the drop shadow y-offset.\r\n    */\r\n    shadowOffsetY: number;\r\n    /**\r\n     * Gets the actual drop shadow y-offset applied to the series.\r\n    */\r\n    actualShadowOffsetY: number;\r\n    /**\r\n     * Gets or sets the LegendItemBadgeTemplate property.\r\n     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by\r\n     * the series object itself.\r\n    */\r\n    legendItemBadgeTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets the actual legend item badge template used by the series.\r\n    */\r\n    actualLegendItemBadgeTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets or sets the LegendItemTemplate property.\r\n     * The legend item control content is created according to the LegendItemTemplate on-demand by\r\n     * the series object itself.\r\n    */\r\n    legendItemTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets the actual legend item template used by the series.\r\n    */\r\n    actualLegendItemTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets or sets the legend item visibility for the current series object.\r\n    */\r\n    legendItemVisibility: Visibility;\r\n    /**\r\n     * Gets the actual visibility of the legend items in the series.\r\n    */\r\n    actualLegendItemVisibility: Visibility;\r\n    /**\r\n     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.\r\n    */\r\n    markerBrush: string;\r\n    /**\r\n     * Gets the actual marker brush of the series.\r\n    */\r\n    actualMarkerBrush: string;\r\n    /**\r\n     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.\r\n    */\r\n    markerOutline: string;\r\n    /**\r\n     * Gets the actual marker outline of the series.\r\n    */\r\n    actualMarkerOutline: string;\r\n    /**\r\n     * Gets or sets the MarkerTemplate for the current series object.\r\n    */\r\n    markerTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets the actual marker template used by the series.\r\n    */\r\n    actualMarkerTemplate: IgDataTemplate;\r\n    /**\r\n     * Gets or sets the marker type for the current series object.\r\n     * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.\r\n    */\r\n    markerType: MarkerType;\r\n    /**\r\n     * Gets the actual marker type set used in the series.\r\n    */\r\n    actualMarkerType: MarkerType;\r\n    /**\r\n     * Gets or sets the Name of the stacked fragment.\r\n    */\r\n    name: string;\r\n    /**\r\n     * Gets or sets the Opacity of the stacked fragment.\r\n    */\r\n    opacity: number;\r\n    /**\r\n     * Gets the series opacity.\r\n    */\r\n    actualOpacity: number;\r\n    /**\r\n     * Gets or sets the brush to use for the outline of the series.\r\n     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.\r\n    */\r\n    outline: string;\r\n    /**\r\n     * Gets the series outline.\r\n    */\r\n    actualOutline: string;\r\n    /**\r\n     * Gets or sets the AreaFillOpacity of the stacked fragment. This property only applies for area-like series.\r\n    */\r\n    areaFillOpacity: number;\r\n    /**\r\n     * Gets the series ActualAreaFillOpacity.  This property only applies for area-like series.\r\n    */\r\n    actualAreaFillOpacity: number;\r\n    /**\r\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\r\n    */\r\n    radiusX: number;\r\n    /**\r\n     * Gets the actual corner radius of the series\r\n    */\r\n    actualRadiusX: number;\r\n    /**\r\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.\r\n    */\r\n    radiusY: number;\r\n    /**\r\n     * Gets the actual corner radius of the series\r\n    */\r\n    actualRadiusY: number;\r\n    /**\r\n     * Gets or sets the width of the current series object's line thickness.\r\n    */\r\n    thickness: number;\r\n    /**\r\n     * Gets or sets the thickness of this stacked fragment.\r\n    */\r\n    actualThickness: number;\r\n    /**\r\n     * Gets or sets the Title property.\r\n     * The legend item control is created according to the Title on-demand by\r\n     * the series object itself.\r\n    */\r\n    title: any;\r\n    /**\r\n     * Gets or sets the value mapping property for the current series object.\r\n    */\r\n    valueMemberPath: string;\r\n    /**\r\n     * Gets or sets the Visibility of the stacked fragment.\r\n    */\r\n    visibility: Visibility;\r\n    /**\r\n     * Gets the actual visibility of the stacked fragment.\r\n    */\r\n    actualVisibility: Visibility;\r\n    /**\r\n     * Gets the resolved brush used between the local series and the parent series.\r\n    */\r\n    parentOrLocalBrush: string;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    private _propertyUpdated;\r\n    /**\r\n     * Event raised when a property (including \"effective\" and non-dependency property) value changes.\r\n    */\r\n    readonly propertyUpdated: EventEmitter<{\r\n        sender: any;\r\n        args: IgxPropertyUpdatedEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}