{"version":3,"file":"igx-financial-series-component.d.ts","sources":["igx-financial-series-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxCategoryAxisBaseComponent } from \"./igx-category-axis-base-component\";\r\nimport { IgxNumericYAxisComponent } from \"./igx-numeric-y-axis-component\";\r\nimport { CategoryTransitionInMode } from \"./CategoryTransitionInMode\";\r\nimport { IgxAssigningCategoryStyleEventArgs } from \"./igx-assigning-category-style-event-args\";\r\nimport { IgxFinancialEventArgs } from \"./igx-financial-event-args\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { FinancialSeries } from \"./FinancialSeries\";\r\n/**\r\n * Represents the base class for all financial indicator and overlay series.\r\n*\r\n* The `IgxFinancialSeriesComponent` represents the base class for all financial indicator and overlay series.\r\n*\r\n* ```html\r\n*  <igx-data-chart\r\n*     #chart\r\n*         [dataSource]=\"data\" >\r\n*   <igx-category-x-axis\r\n*         label=\"label\"\r\n*         #xAxis>\r\n*         </igx-category-x-axis>\r\n*  <igx-numeric-y-axis\r\n*         minimumValue=\"0\"\r\n*         #yAxis>\r\n* </igx-numeric-y-axis>\r\n* <igx-financial-price-series\r\n*     [xAxis]=\"xAxis\"\r\n*       [yAxis]=\"yAxis\"\r\n*       openMemberPath=\"open\"\r\n*       highMemberPath=\"high\"\r\n*       lowMemberPath=\"low\"\r\n*       closeMemberPath=\"close\"\r\n*       volumeMemberPath=\"volume\">\r\n* </igx-financial-price-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series = new IgxFinancialPriceSeriesComponent();\r\n* series.xAxis = this.xAxis;\r\n* series.yAxis = this.yAxis;\r\n* series.openMemberPath = \"open\";\r\n* series.highMemberPath = \"high\";\r\n* series.lowMemberPath = \"low\";\r\n* series.closeMemberPath = \"close\";\r\n* series.volumeMemberPath=\"volume\";\r\n* this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxFinancialSeriesComponent_PROVIDERS: {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare abstract class IgxFinancialSeriesComponent extends IgxSeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: FinancialSeries;\r\n    constructor();\r\n    /**\r\n     * Gets whether the current series is a financial type series.\r\n    */\r\n    readonly isFinancial: boolean;\r\n    /**\r\n     * Gets or sets the brush to use for negative portions of the series.\r\n    *\r\n    * The `negativeBrush` property is used to brush the negative portions of the series.\r\n    *\r\n    * ```ts\r\n    * series.negativeBrush=\"red\";\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    * \t  negativeBrush=\"red\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    negativeBrush: string;\r\n    /**\r\n     * Gets or sets the effective x-axis for the current FinancialSeries object.\r\n    *\r\n    * Use `xAxis` property to set effective x-axis for the current FinancialSeries object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    xAxis: IgxCategoryAxisBaseComponent;\r\n    /**\r\n     * Gets or sets the effective y-axis for the current FinancialSeries object.\r\n    *\r\n    * Use `yAxis` property to set the effective y-axis for the current FinancialSeries object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    yAxis: IgxNumericYAxisComponent;\r\n    /**\r\n     * Gets or sets the open mapping property for the current series object.\r\n    *\r\n    * The `openMemberPath` property is used for open mapping of the current series object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    openMemberPath: string;\r\n    /**\r\n     * Gets or sets the high mapping property for the current series object.\r\n    *\r\n    * Use `highMemberPath` propert for high mapping of the current series object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    highMemberPath: string;\r\n    /**\r\n     * Gets or sets the low mapping property for the current series object.\r\n    *\r\n    * The `lowMemberPath` is used for low mapping property of the current series object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    lowMemberPath: string;\r\n    /**\r\n     * Gets or sets the close mapping property for the current series object.\r\n    *\r\n    * Use `closeMemberPath` property for the close mapping of the current series object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    closeMemberPath: string;\r\n    /**\r\n     * Gets or sets the volume mapping property for the current series object.\r\n    *\r\n    * The `volumeMemberPath` property is used for the volume mapping property of the current series object.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxFinancialPriceSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * series.yAxis = this.yAxis;\r\n    * series.openMemberPath = \"open\";\r\n    * series.highMemberPath = \"high\";\r\n    * series.lowMemberPath = \"low\";\r\n    * series.closeMemberPath = \"close\";\r\n    * series.volumeMemberPath=\"volume\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    volumeMemberPath: string;\r\n    /**\r\n     * Gets or sets whether this category series should allow custom style overrides of its individual visuals.\r\n    *\r\n    * The `isCustomCategoryStyleAllowed` property is used to check if the category series should allow custom style.\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    * \t  isCustomCategoryStyleAllowed=\"True\" />\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * series.isCustomCategoryStyleAllowed= true;\r\n    * ```\r\n    */\r\n    isCustomCategoryStyleAllowed: boolean;\r\n    /**\r\n     * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.\r\n     * Note: Transitions are not currently supported for stacked series.\r\n    *\r\n    * The `transitionInMode` property is used to gets or sets the method by which to animate the data into the chart when the chart data source is swapped.\r\n    *\r\n    * ```ts\r\n    * series.transitionInMode =CategoryTransitionInMode.Auto;\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    * \t  transitionInMode= \"Auto\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    transitionInMode: CategoryTransitionInMode;\r\n    /**\r\n     * Gets or sets whether the series should transition into the plot area when a new data source is assigned.\r\n     * Note: Transitions are not currently supported for stacked series.\r\n    *\r\n    * The `isTransitionInEnabled` property is used to check if the series should transition into the plot area when a new data source is assigned.\r\n    *\r\n    * ```ts\r\n    * series.isTransitionInEnabled= true;\r\n    * ```\r\n    *\r\n    * ```html\r\n    *  <igx-data-chart\r\n    *     #chart\r\n    *         [dataSource]=\"data\" >\r\n    *   <igx-category-x-axis\r\n    *         label=\"label\"\r\n    *         #xAxis>\r\n    *         </igx-category-x-axis>\r\n    *  <igx-numeric-y-axis\r\n    *         minimumValue=\"0\"\r\n    *         #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-financial-price-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *       [yAxis]=\"yAxis\"\r\n    *       openMemberPath=\"open\"\r\n    *       highMemberPath=\"high\"\r\n    *       lowMemberPath=\"low\"\r\n    *       closeMemberPath=\"close\"\r\n    *       volumeMemberPath=\"volume\"\r\n    * \t  isTransitionInEnabled= \"true\">\r\n    * </igx-financial-price-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    isTransitionInEnabled: boolean;\r\n    /**\r\n     * Overridden by derived series classes to indicate when negative colors are supported or not.\r\n    */\r\n    readonly isNegativeColorSupported: boolean;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    /**\r\n     * Returns the offset value for this series if grouped on a category axis.\r\n    \r\n    *\r\n    * The `getOffsetValue` method returns the offset value for this series if grouped on a category axis.\r\n    *\r\n    * ```ts\r\n    * number offset= series.getOffsetValue();\r\n    * ```\r\n    */\r\n    getOffsetValue(): number;\r\n    /**\r\n     * Returns the width of the category grouping this series is in.\r\n    \r\n    *\r\n    * The `getCategoryWidth` method returns the width of the category grouping this series is in.\r\n    *\r\n    * ```ts\r\n    * number width = series.getCategoryWidth();\r\n    * ```\r\n    */\r\n    getCategoryWidth(): number;\r\n    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesHighValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesLowValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesCloseValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesOpenValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesVolumeValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesHighValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    getSeriesLowValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    getSeriesOpenValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    getSeriesCloseValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    getSeriesVolumeValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    /**\r\n     * Determine if object can be used as YAxis\r\n    \r\n    * @param axis  * The object to check\r\n    *\r\n    * Use `canUseAsYAxis` method to determine if the object can be used as YAxis.\r\n    *\r\n    * ```ts\r\n    *   boolean canY =series.canUseAsYAxis(yAxis);\r\n    * ```\r\n    */\r\n    canUseAsYAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as XAxis\r\n    \r\n    * @param axis  * The object to check\r\n    *\r\n    * Use `canUseAsXAxis` method to determine if the object can be used as XAxis.\r\n    *\r\n    * ```ts\r\n    *   boolean canX =series.canUseAsXAxis(xAxis);\r\n    * ```\r\n    */\r\n    canUseAsXAxis(axis: any): boolean;\r\n    /**\r\n     * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.\r\n    \r\n    * @param world  * The world position for which to return the index.\r\n    *\r\n    * The `getExactItemIndex` method gets the precise item index, if possible, based on the closeness to the previous or next whole integer.\r\n    *\r\n    * If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.\r\n    *\r\n    * ```ts\r\n    * number index = series.getExactItemIndex(world);\r\n    * ```\r\n    */\r\n    getExactItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the index of the item that resides at the provided world coordinates.\r\n    \r\n    * @param world  * The world coordinates of the requested item.\r\n    *\r\n    * The `getItemIndex` method gets the index of the item that resides at the provided world coordinates.\r\n    *\r\n    * ```ts\r\n    * number itemindex= series.getItemIndex(world);\r\n    * ```\r\n    */\r\n    getItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    *\r\n    * The `getItem` method gets the item that is the best match for the specified world coordinates.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    setNegativeColors(negativeBrush: string, negativeOutline: string): void;\r\n    private _assigningCategoryStyle;\r\n    /**\r\n     * Event raised when Assigning Category Style\r\n    *\r\n    * The `AssigningCategoryStyle` event raised when assigning Category Style.\r\n    *\r\n    * ```ts\r\n    * series.assigningCategoryStyle= this.chart_AssigningCategoryStyle;\r\n    * chart_AssigningCategoryStyle(sender :any,args: AssigningCategoryStyleEventArgs )\r\n    *   {\r\n    *\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly assigningCategoryStyle: EventEmitter<{\r\n        sender: any;\r\n        args: IgxAssigningCategoryStyleEventArgs;\r\n    }>;\r\n    private _typical;\r\n    /**\r\n     * Handle this event in order to perform a custom typical price calculation.\r\n    *\r\n    * Use `Typical` event to perform a custom typical price calculation.\r\n    *\r\n    * ```ts\r\n    * series.typical= this.chart_typical;\r\n    *\r\n    *   chart_typical(sender :any,args: FinancialEventArgs )\r\n    *   {\r\n    *\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly typical: EventEmitter<{\r\n        sender: any;\r\n        args: IgxFinancialEventArgs;\r\n    }>;\r\n    private _typicalBasedOn;\r\n    /**\r\n     * Handle this event in order to specify which columns the Typical price calculation is based on.\r\n    *\r\n    * Use `TypicalBasedOn` event to specify which columns the Typical price calculation is based on.\r\n    *\r\n    * ```ts\r\n    *    series.typicalBasedOn= this.chart_typicalBasedOn;\r\n    *     chart_typicalBasedOn(sender :any,args: FinancialEventArgs )\r\n    *   {\r\n    *\r\n    *   }\r\n    * ```\r\n    */\r\n    readonly typicalBasedOn: EventEmitter<{\r\n        sender: any;\r\n        args: IgxFinancialEventArgs;\r\n    }>;\r\n}\r\n"]}