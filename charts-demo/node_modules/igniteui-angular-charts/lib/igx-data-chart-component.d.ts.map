{"version":3,"file":"igx-data-chart-component.d.ts","sources":["igx-data-chart-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, OnDestroy, Injector, ComponentFactoryResolver, AfterContentInit, Renderer2, QueryList, NgZone, ViewContainerRef } from '@angular/core';\r\nimport { IgxAxisComponent } from './igx-axis-component';\r\nimport { IgxSeriesComponent } from './igx-series-component';\r\nimport { GridMode } from './GridMode';\r\nimport { IgxSeriesViewerComponent } from './igx-series-viewer-component';\r\nimport { XamDataChart } from './XamDataChart';\r\nimport { IgxSeriesCollection } from './igx-series-collection';\r\nimport { IgxAxisCollection } from './igx-axis-collection';\r\nexport declare const IgxDataChartComponent_PROVIDERS: {\r\n    provide: typeof IgxSeriesViewerComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\n/**\r\n * Represents a chart area containing axes, series, an optional legend and other hosted content.\r\n*/\r\nexport declare class IgxDataChartComponent extends IgxSeriesViewerComponent implements AfterContentInit, OnDestroy {\r\n    private _renderer;\r\n    private _elRef;\r\n    private _ngZone;\r\n    private _componentFactoryResolver;\r\n    private _injector;\r\n    contentAxes: QueryList<IgxAxisComponent>;\r\n    contentSeries: QueryList<IgxSeriesComponent>;\r\n    _dynamicContent: ViewContainerRef;\r\n    private _height;\r\n    private _width;\r\n    height: string;\r\n    width: string;\r\n    /**\r\n     * Gets or sets the legend used for the current chart.\r\n    */\r\n    legend: any;\r\n    /**\r\n     * The series actually present in the chart. Do not directly modify this array.\r\n     * This array's contents can be modified by causing Angular to reproject the child content.\r\n     * Or adding and removing series from the manual series collection on the series property.\r\n     */\r\n    actualSeries: IgxSeriesComponent[];\r\n    /**\r\n     * The axes actually present in the chart. Do not directly modify this array.\r\n     * This array's contents can be modified by causing Angular to reproject the child content.\r\n     * Or adding and removing axes from the manual axes collection on the axes property.\r\n     */\r\n    actualAxes: IgxAxisComponent[];\r\n    private _container;\r\n    private _series;\r\n    /**\r\n     * A collection or manually added series for the chart.\r\n    */\r\n    readonly series: IgxSeriesCollection;\r\n    private _axes;\r\n    /**\r\n     * A collection or manually added axes for the chart.\r\n    */\r\n    readonly axes: IgxAxisCollection;\r\n    private _root;\r\n    constructor(_renderer: Renderer2, _elRef: ViewContainerRef, _ngZone: NgZone, _componentFactoryResolver: ComponentFactoryResolver, _injector: Injector);\r\n    ngOnDestroy(): void;\r\n    private _wrapper;\r\n    protected createImplementation(): XamDataChart;\r\n    private _chart;\r\n    private _dataSource;\r\n    dataSource: any;\r\n    bindData(): void;\r\n    private _axesAdapter;\r\n    private _seriesAdapter;\r\n    ngAfterContentInit(): void;\r\n    private _ensureTooltipCreated;\r\n    private _defaultTooltips;\r\n    private _ensureDefaultTooltip;\r\n    private _onDefaultTooltipsReady;\r\n    private createTooltip;\r\n    /**\r\n     * Gets or sets the channel with which to synchronize.\r\n    *\r\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\r\n    */\r\n    syncChannel: string;\r\n    /**\r\n     * Gets or sets the bool used to display the window preview shadow.\r\n    *\r\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\r\n    */\r\n    synchronizeVertically: boolean;\r\n    /**\r\n     * Gets or sets the bool used to display the window preview shadow.\r\n    *\r\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\r\n    */\r\n    synchronizeHorizontally: boolean;\r\n    /**\r\n                             * @hidden\r\n                             */\r\n    readonly i: XamDataChart;\r\n    /**\r\n * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.\r\n*\r\n* Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.\r\n*\r\n* ```html\r\n* <igx-data-chart [dataSource]=\"data\"\r\n*     isSquare=\"true\"\r\n*     width=\"800px\"\r\n*     height=\"400px\">\r\n*   <igx-category-x-axis #xAxis\r\n*     label=\"label\">\r\n*   </igx-category-x-axis>\r\n*   <igx-numeric-y-axis #yAxis\r\n*     majorStroke=\"green\">\r\n*   </igx-numeric-y-axis>\r\n*\r\n*   <igx-column-series\r\n*     [xAxis]=\"xAxis\"\r\n*     [yAxis]=\"yAxis\"\r\n*     valueMemberPath=\"value\">\r\n*   </igx-column-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n*  this.chart.isSquare=\"True\";\r\n* ```\r\n*/\r\n    isSquare: boolean;\r\n    /**\r\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\r\n     * This property is effectively a shortcut to the Width of the WindowRect property.\r\n    *\r\n    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     windowScaleHorizontal=\"0.75\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.windowScaleHorizontal=\"0.75\";\r\n    * ```\r\n    */\r\n    windowScaleHorizontal: number;\r\n    /**\r\n     * A number between 0 and 1 determining the scale of the vertical zoom.\r\n     * This property is effectively a shortcut to the Height of the WindowRect property.\r\n    *\r\n    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     windowScaleVertical=\"0.75\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.windowScaleVertical=\"0.75\";\r\n    * ```\r\n    */\r\n    windowScaleVertical: number;\r\n    /**\r\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\r\n     * This property is effectively a shortcut to the Width of the ActualWindowRect property.\r\n    */\r\n    actualWindowScaleHorizontal: number;\r\n    /**\r\n     * A number between 0 and 1 determining the scale of the vertical zoom.\r\n     * This property is effectively a shortcut to the Height of the ActualWindowRect property.\r\n    */\r\n    actualWindowScaleVertical: number;\r\n    /**\r\n     * Gets or sets horizontal zoomability of the current control\r\n    *\r\n    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     isHorizontalZoomEnabled=\"true\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.IsHorizontalZoomEnabled= true;\r\n    * ```\r\n    */\r\n    isHorizontalZoomEnabled: boolean;\r\n    /**\r\n     * Gets or sets vertical zoomability of the current control\r\n    *\r\n    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     isVerticalZoomEnabled=\"true\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.isVerticalZoomEnabled=\"True\";\r\n    * ```\r\n    */\r\n    isVerticalZoomEnabled: boolean;\r\n    /**\r\n     * Gets or sets how grid lines are rendered in relation to series.\r\n    *\r\n    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     gridMode=\"beforeSeries\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis\r\n    *     majorStroke=\"green\">\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    gridMode: GridMode;\r\n    /**\r\n     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\r\n    */\r\n    alignsGridLinesToPixels: boolean;\r\n    /**\r\n     * Gets or sets the palette of brushes to use for coloring the chart series.\r\n    *\r\n    * `brushes` can be set declaratively to a list of color strings.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     brushes=\"red,green,blue\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.brushes=\"red\" ;\r\n    * ```\r\n    */\r\n    brushes: string[];\r\n    /**\r\n     * Gets or sets the MarkerBrushes property.\r\n     * The brushes property defines the palette from which automatically assigned series brushes are selected.\r\n    *\r\n    * `markerBrushes` can be set declaratively to a list of color strings.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     markerBrushes=\"red,green,blue\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.markerBrushes=\"red,green,blue\";\r\n    * ```\r\n    */\r\n    markerBrushes: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes to use for outlines on the chart series.\r\n    *\r\n    * `outlines` can be set declaratively to a list of color strings.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     outlines=\"red,green,blue\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.outlines=\"red,green,blue\";\r\n    * ```\r\n    */\r\n    outlines: string[];\r\n    /**\r\n     * Gets or sets the MarkerOutlines property.\r\n     * The brushes property defines the palette from which automatically assigned series brushes are selected.\r\n    *\r\n    * `markerOutlines` can be set declaratively to a list of color strings.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\"\r\n    *     markerOutlines=\"red,green,blue\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\"\r\n    *     markerType=\"circle\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * this.chart.markerOutlines=\"red,green,blue\";\r\n    * ```\r\n    */\r\n    markerOutlines: string[];\r\n    /**\r\n     * Gets or sets the DefaultAxisStroke property.\r\n     * The DefaultAxisStroke property defines the brush which is used by the axes when no Axis.Stroke is set.\r\n    */\r\n    defaultAxisStroke: string;\r\n    /**\r\n     * Gets or sets the DefaultAxisMajorStroke property.\r\n     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no Axis.MajorStroke is set.\r\n    */\r\n    defaultAxisMajorStroke: string;\r\n    /**\r\n     * Gets or sets the DefaultAxisMinorStroke property.\r\n     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no Axis.MinorStroke is set.\r\n    */\r\n    defaultAxisMinorStroke: string;\r\n    /**\r\n     * Margin applied to the left of the plot area.\r\n    */\r\n    plotAreaMarginLeft: number;\r\n    /**\r\n     * Margin applied above the plot area.\r\n    */\r\n    plotAreaMarginTop: number;\r\n    /**\r\n     * Margin applied to the right of the plot area.\r\n    */\r\n    plotAreaMarginRight: number;\r\n    /**\r\n     * Margin applied below the plot area.\r\n    */\r\n    plotAreaMarginBottom: number;\r\n    findByName(name: string): any;\r\n    /**\r\n * Notifies the chart that the CSS styles in effect have been updated.\r\n\r\n*/\r\n    styleUpdated(): void;\r\n    /**\r\n     * Export serialized visual data.\r\n    \r\n    */\r\n    exportSerializedVisualData(): string;\r\n}\r\n"]}