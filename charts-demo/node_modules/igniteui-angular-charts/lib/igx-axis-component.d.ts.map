{"version":3,"file":"igx-axis-component.d.ts","sources":["igx-axis-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { Visibility } from \"igniteui-angular-core\";\r\nimport { HorizontalAlignment } from \"igniteui-angular-core\";\r\nimport { VerticalAlignment } from \"igniteui-angular-core\";\r\nimport { Axis } from './Axis';\r\nimport { AxisLabelsLocation } from './AxisLabelsLocation';\r\nimport { AxisTitlePosition } from './AxisTitlePosition';\r\nimport { IgxRenderRequestedEventArgs } from './igx-render-requested-event-args';\r\nimport { IgxAxisRangeChangedEventArgs } from './igx-axis-range-changed-event-args';\r\nimport { IgxAxisAnnotationCollection } from './igx-axis-annotation-collection';\r\nexport declare const IgxAxisComponent_PROVIDERS: any[];\r\n/**\r\n * Represents the base class from which all axis types are derived.\r\n*\r\n* The `IgxAxisComponent` is an array of axis objects.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n*     [dataSource]=\"data\" >\r\n*     <igx-category-x-axis\r\n* \t\tlabel=\"label\"\r\n* \t\t#xAxis>\r\n*     </igx-category-x-axis>\r\n*     <igx-numeric-y-axis\r\n* \t\t#yAxis>\r\n*     </igx-numeric-y-axis>\r\n* </igx-data-chart>\r\n* ```\r\n*/\r\nexport declare abstract class IgxAxisComponent implements OnInit {\r\n    protected _implementation: any;\r\n    readonly i: Axis;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    readonly axisInternal: Axis;\r\n    protected createImplementation(): Axis;\r\n    ngOnInit(): void;\r\n    name: string;\r\n    provideData(data: any): void;\r\n    private _renderer;\r\n    private _provideRenderer;\r\n    static _createFromInternal(internal: any): IgxAxisComponent;\r\n    /**\r\n * Gets or sets if the current axis is of category axis type\r\n*/\r\n    readonly isCategory: boolean;\r\n    /**\r\n     * Gets or sets if the current axis is of numeric axis type\r\n    *\r\n    *     Gets or sets if the current axis is of numeric axis type\r\n    */\r\n    readonly isNumeric: boolean;\r\n    /**\r\n     * Gets if the current axis is of angular axis type\r\n    */\r\n    readonly isAngular: boolean;\r\n    /**\r\n     * Gets or sets if the current axis is of radial axis type\r\n    */\r\n    readonly isRadial: boolean;\r\n    /**\r\n     * Gets if the current axis is a vertical axis.\r\n    */\r\n    readonly isVertical: boolean;\r\n    /**\r\n     * Gets or sets if the current axis is sorting data items\r\n    */\r\n    readonly isSorting: boolean;\r\n    /**\r\n     * Gets or sets if the current axis is of date time axis type\r\n    */\r\n    readonly isDateTime: boolean;\r\n    /**\r\n     * Gets or sets if the axis is a piecewise scaling function.\r\n    */\r\n    readonly isPiecewise: boolean;\r\n    /**\r\n     * Gets if the current axis is of category date time axis type\r\n    */\r\n    readonly isCategoryDateTime: boolean;\r\n    /**\r\n     * Gets if the current axis is a continuous rather than a discrete scale\r\n    */\r\n    readonly isContinuous: boolean;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\r\n    *\r\n    * The `formatLabel` function takes an object that produces a formatted label for displaying in the chart.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tname=\"xAxis\"\r\n    * \t\tFormatLabel=\"xAxis_FormatLabel\" />\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    formatLabel: (item: any) => string;\r\n    /**\r\n     * Gets or sets the Title property.\r\n    *\r\n    * Use `title` property to display the title of the component.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    title: string;\r\n    /**\r\n     * Gets or sets the Stroke property.\r\n     * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.\r\n    *\r\n    * Use `stroke` property to set the stroke of the chart.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\tstroke=\"blue\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    stroke: string;\r\n    /**\r\n     * Gets or sets the effective stroke used for the axis.\r\n    */\r\n    actualStroke: string;\r\n    /**\r\n     * Gets or sets the StrokeThickness property.\r\n    *\r\n    * Use `strokeThickness` property for the thickness of the stroke.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\tstrokeThickness= 5\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    strokeThickness: number;\r\n    /**\r\n     * Gets or sets the Strip property.\r\n    *\r\n    * Use `strip` property to set the strip of the chart.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t strip= \"grey\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    strip: string;\r\n    /**\r\n     * Gets or sets the MajorStroke property.\r\n     * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.\r\n    *\r\n    * Gets or sets the `majorStroke` using this property.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t   majorStroke=\"black\"\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    majorStroke: string;\r\n    /**\r\n     * Gets or sets the ActualMajorStroke property.\r\n    *\r\n    * The `actualMajorStroke` property is used for ActualMajorStroke of the axis.\r\n    */\r\n    actualMajorStroke: string;\r\n    /**\r\n     * Gets or sets the MajorStrokeThickness property.\r\n    *\r\n    * Gets or sets the `majorStrokeThickness` using this property.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t  majorStrokeThickness=\"1\"\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    majorStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the MinorStroke property.\r\n    *\r\n    * Gets or sets the minorStroke thickness using `minorStrokeThickness` property.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t minorStrokeThickness=\"1\"\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    minorStroke: string;\r\n    /**\r\n     * Gets or sets the ActualMinorStroke property.\r\n    *\r\n    * The `actualMinorStroke` property is used for ActualMinorStroke of the axis.\r\n    */\r\n    actualMinorStroke: string;\r\n    /**\r\n     * Gets or sets the MinorStrokeThickness property.\r\n    */\r\n    minorStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the TickStroke property.\r\n    *\r\n    * Use `tickStroke` property for the color of the tickmarks.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\ttickStroke=\"black\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    tickStroke: string;\r\n    /**\r\n     * Gets or sets the TickStrokeThickness property.\r\n    *\r\n    * Use `tickStrokeThickness` property for thickness of the stroke tickmarks.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\ttickStrokeThicknes=\"2\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    tickStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the TickLength property.\r\n    *\r\n    * Use `tickLength` property for The length of the tickmarks to display for this axis.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\ttickLength=\"5\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    tickLength: number;\r\n    /**\r\n     * Gets or sets the IsDisabled property. If true, the axis will not be rendered.\r\n    *\r\n    * The `isDisabled` property is used to decide if the axis will not be rendered.\r\n    */\r\n    isDisabled: boolean;\r\n    /**\r\n     * Gets or sets the IsInverted property.\r\n    *\r\n    * Gets or sets the `isInverted` property.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\tisInverted= true\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    isInverted: boolean;\r\n    /**\r\n     * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.\r\n    *\r\n    * Use `useEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,\r\n    * before resolving collisions, etc.\r\n    */\r\n    useEnhancedIntervalManagement: boolean;\r\n    /**\r\n     * Gets or sets the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.\r\n    *\r\n    * The `enhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\tenhancedIntervalMinimumCharacters=5\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    *\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    enhancedIntervalMinimumCharacters: number;\r\n    /**\r\n     * Gets or sets the text style to use for axis labels.\r\n    *\r\n    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\r\n    */\r\n    labelTextStyle: string;\r\n    /**\r\n     * The color of the {0}.\r\n    *\r\n    * The `labelTextColor` property Overrides the color of the text used for the axis labels.\r\n    */\r\n    labelTextColor: string;\r\n    /**\r\n     * Gets or sets the location of the {0}.\r\n    *\r\n    * The `Location` property is used for the location.\r\n    */\r\n    labelLocation: AxisLabelsLocation;\r\n    /**\r\n     * Gets or sets the visibility of the {0}.\r\n    *\r\n    * The `Visibility` property is used for the visibility of the axis.\r\n    */\r\n    labelVisibility: Visibility;\r\n    /**\r\n     * Gets or sets whether the first label is displayed when the zoom level is set to 1.\r\n    *\r\n    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\r\n    */\r\n    labelShowFirstLabel: boolean;\r\n    /**\r\n     * Gets or sets the angle of the {0}.\r\n    *\r\n    * The `Angle` property is used to set the angle of the axis.\r\n    */\r\n    labelAngle: number;\r\n    /**\r\n     * Distance between the axis and the edge of the control.\r\n    *\r\n    * The `Extent` property is used for the extent.\r\n    */\r\n    labelExtent: number;\r\n    /**\r\n     * Margin applied to the left of the {0}.\r\n    *\r\n    * The `labelLeftMargin` property is used for the left margin of the labels.\r\n    */\r\n    labelLeftMargin: number;\r\n    /**\r\n     * Margin applied to the right of the {0}.\r\n    *\r\n    * The `labelRightMargin` property is used for the right margin of the labels.\r\n    */\r\n    labelRightMargin: number;\r\n    /**\r\n     * Margin applied above the {0}.\r\n    *\r\n    * The `labelTopMargin` property is used for the top margin of the labels.\r\n    */\r\n    labelTopMargin: number;\r\n    /**\r\n     * Margin applied below the {0}.\r\n    *\r\n    * The `labelBottomMargin` is used to set the bottom margin of the labels.\r\n    */\r\n    labelBottomMargin: number;\r\n    /**\r\n     * Gets or sets the horizontal alignment of the {0}.\r\n    *\r\n    * The `HorizontalAlignment` property is used for the horizontal alignment.\r\n    */\r\n    labelHorizontalAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets the vertical alignment of the {0}.\r\n    *\r\n    * The `VerticalAlignment` property is used for the vertical alignment of the axis.\r\n    */\r\n    labelVerticalAlignment: VerticalAlignment;\r\n    ensureLabelSettings(): void;\r\n    /**\r\n     * Gets or sets the CrossingAxis property.\r\n    *\r\n    * The `crossingAxis` property is used for CrossingAxis .\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\tcrossingAxis= \"xAxis\"\r\n    * \t\tcrossingValue= 700\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    crossingAxis: IgxAxisComponent;\r\n    /**\r\n     * Gets or sets the CrossingValue property.\r\n    *\r\n    * The `crossingValue` property is used for CrossingValue of the axis.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart\r\n    *     [dataSource]=\"data\" >\r\n    *     <igx-category-x-axis\r\n    * \t\tlabel=\"label\"\r\n    * \t\t#xAxis>\r\n    *     </igx-category-x-axis>\r\n    *     <igx-numeric-y-axis\r\n    * \t\tcrossingAxis= \"xAxis\"\r\n    * \t\tcrossingValue= 700\r\n    * \t\t#yAxis>\r\n    *     </igx-numeric-y-axis>\r\n    * </igx-data-chart>\r\n    * ```\r\n    */\r\n    crossingValue: any;\r\n    /**\r\n     * Gets or sets the title position relative to the axis labels.\r\n    */\r\n    titlePosition: AxisTitlePosition;\r\n    /**\r\n     * Gets or sets the text style to use for axis labels.\r\n    *\r\n    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.\r\n    */\r\n    titleTextStyle: string;\r\n    /**\r\n     * The color of the {0}.\r\n    *\r\n    * The `labelTextColor` property Overrides the color of the text used for the axis labels.\r\n    */\r\n    titleTextColor: string;\r\n    /**\r\n     * Gets or sets the location of the {0}.\r\n    *\r\n    * The `Location` property is used for the location.\r\n    */\r\n    titleLocation: AxisLabelsLocation;\r\n    /**\r\n     * Gets or sets the visibility of the {0}.\r\n    *\r\n    * The `Visibility` property is used for the visibility of the axis.\r\n    */\r\n    titleVisibility: Visibility;\r\n    /**\r\n     * Gets or sets whether the first label is displayed when the zoom level is set to 1.\r\n    *\r\n    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.\r\n    */\r\n    titleShowFirstLabel: boolean;\r\n    /**\r\n     * Gets or sets the angle of the {0}.\r\n    *\r\n    * The `Angle` property is used to set the angle of the axis.\r\n    */\r\n    titleAngle: number;\r\n    /**\r\n     * Distance between the axis and the edge of the control.\r\n    *\r\n    * The `Extent` property is used for the extent.\r\n    */\r\n    titleExtent: number;\r\n    /**\r\n     * Margin applied to the left of the {0}.\r\n    *\r\n    * The `labelLeftMargin` property is used for the left margin of the labels.\r\n    */\r\n    titleLeftMargin: number;\r\n    /**\r\n     * Margin applied to the right of the {0}.\r\n    *\r\n    * The `labelRightMargin` property is used for the right margin of the labels.\r\n    */\r\n    titleRightMargin: number;\r\n    /**\r\n     * Margin applied above the {0}.\r\n    *\r\n    * The `labelTopMargin` property is used for the top margin of the labels.\r\n    */\r\n    titleTopMargin: number;\r\n    /**\r\n     * Margin applied below the {0}.\r\n    *\r\n    * The `labelBottomMargin` is used to set the bottom margin of the labels.\r\n    */\r\n    titleBottomMargin: number;\r\n    /**\r\n     * Gets or sets the horizontal alignment of the {0}.\r\n    *\r\n    * The `HorizontalAlignment` property is used for the horizontal alignment.\r\n    */\r\n    titleHorizontalAlignment: HorizontalAlignment;\r\n    /**\r\n     * Gets or sets the vertical alignment of the {0}.\r\n    *\r\n    * The `VerticalAlignment` property is used for the vertical alignment of the axis.\r\n    */\r\n    titleVerticalAlignment: VerticalAlignment;\r\n    ensureTitleSettings(): void;\r\n    private _annotations;\r\n    /**\r\n     * Gets the current annotations for the axis.\r\n    */\r\n    annotations: IgxAxisAnnotationCollection;\r\n    /**\r\n     * Gets or sets the coercion methods to use when loading data from data sources.\r\n     * Should be specified before setting any member paths, if being used. Setting it later\r\n     * will not cause data to be re-imported into the chart.\r\n    *\r\n    * The\t`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.\r\n    * Setting it later will not cause data to be reimported into the chart.\r\n    */\r\n    coercionMethods: any;\r\n    /**\r\n     * Gets or sets whether the series should expect that properties in its items source may be functions that need to be\r\n     * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.\r\n     * This value must be set before assigning an item's source to take effect.\r\n    */\r\n    expectFunctions: boolean;\r\n    /**\r\n     * Gets or sets the axis label format string.\r\n    *\r\n    * The `label` property is used for label mapping of the axis labels.\r\n    */\r\n    label: any;\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    labelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LabelFormat string.\r\n    */\r\n    labelFormatSpecifiers: any[];\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n * Renders the axis with no animation.\r\n\r\n*/\r\n    renderAxis(): void;\r\n    /**\r\n     * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.\r\n    \r\n    */\r\n    resetCachedEnhancedInterval(): void;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Gets the label for a data item.\r\n    \r\n    * @param value  * The unscaled value to get a label for.\r\n    */\r\n    getValueLabel(value: number): string;\r\n    /**\r\n     * Scales a value from axis space into screen space.\r\n    \r\n    * @param unscaledValue  * The unscaled axis value to scale.\r\n    */\r\n    scaleValue(unscaledValue: number): number;\r\n    private _rangeChanged;\r\n    /**\r\n     * Occurs when the axis range changes.\r\n    */\r\n    readonly rangeChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxAxisRangeChangedEventArgs;\r\n    }>;\r\n    private _renderRequested;\r\n    /**\r\n     * This event is raised every time a render has been requested from a series.\r\n    */\r\n    readonly renderRequested: EventEmitter<{\r\n        sender: any;\r\n        args: IgxRenderRequestedEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}