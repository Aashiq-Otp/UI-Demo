{"version":3,"file":"igx-shape-series-base-component.d.ts","sources":["igx-shape-series-base-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgxNumericXAxisComponent } from \"./igx-numeric-x-axis-component\";\r\nimport { IgxNumericYAxisComponent } from \"./igx-numeric-y-axis-component\";\r\nimport { IgxStyleShapeEventArgs } from \"./igx-style-shape-event-args\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { ShapeSeriesBase } from \"./ShapeSeriesBase\";\r\n/**\r\n * Series class for rendering polygons.\r\n*/\r\nexport declare const IgxShapeSeriesBaseComponent_PROVIDERS: {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare abstract class IgxShapeSeriesBaseComponent extends IgxSeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: ShapeSeriesBase;\r\n    constructor();\r\n    /**\r\n     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.\r\n     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.\r\n    */\r\n    shapeMemberPath: string;\r\n    /**\r\n     * Gets or sets the effective x-axis for the current ScatterBase object.\r\n    */\r\n    xAxis: IgxNumericXAxisComponent;\r\n    /**\r\n     * Gets or sets the effective y-axis for the current ScatterBase object.\r\n    */\r\n    yAxis: IgxNumericYAxisComponent;\r\n    /**\r\n     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.\r\n     * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.\r\n    */\r\n    shapeFilterResolution: number;\r\n    /**\r\n     * Gets whether or not this series is a shape series\r\n    */\r\n    readonly isShape: boolean;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Determine if object can be used as YAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsYAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as XAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsXAxis(axis: any): boolean;\r\n    private _styleShape;\r\n    /**\r\n     * Raised when tile's image URI should be provided\r\n    */\r\n    readonly styleShape: EventEmitter<{\r\n        sender: any;\r\n        args: IgxStyleShapeEventArgs;\r\n    }>;\r\n}\r\n"]}