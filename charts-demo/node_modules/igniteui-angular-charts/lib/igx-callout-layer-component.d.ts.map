{"version":3,"file":"igx-callout-layer-component.d.ts","sources":["igx-callout-layer-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { CalloutCollisionMode } from \"./CalloutCollisionMode\";\r\nimport { IgxCalloutStyleUpdatingEventArgs } from \"./igx-callout-style-updating-event-args\";\r\nimport { IgxCalloutContentUpdatingEventArgs } from \"./igx-callout-content-updating-event-args\";\r\nimport { IgxCalloutLabelUpdatingEventArgs } from \"./igx-callout-label-updating-event-args\";\r\nimport { IgxCalloutSeriesSelectingEventArgs } from \"./igx-callout-series-selecting-event-args\";\r\nimport { IgxAnnotationLayerComponent } from \"./igx-annotation-layer-component\";\r\nimport { CalloutLayer } from \"./CalloutLayer\";\r\n/**\r\n * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.\r\n*/\r\nexport declare const IgxCalloutLayerComponent_PROVIDERS: ({\r\n    provide: typeof IgxAnnotationLayerComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare class IgxCalloutLayerComponent extends IgxAnnotationLayerComponent {\r\n    protected createImplementation(): CalloutLayer;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: CalloutLayer;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the label mapping property for the callouts.\r\n    */\r\n    labelMemberPath: string;\r\n    /**\r\n     * Gets or sets the label mapping property for the callouts.\r\n    */\r\n    xMemberPath: string;\r\n    /**\r\n     * Gets or sets the label mapping property for the callouts.\r\n    */\r\n    yMemberPath: string;\r\n    /**\r\n     * Gets or sets the key mapping property for the callouts.\r\n    */\r\n    keyMemberPath: string;\r\n    /**\r\n     * Gets or sets whether to allow the callouts to be variable distances from the target points, for suppporting collision modes.\r\n    */\r\n    isCalloutOffsettingEnabled: boolean;\r\n    /**\r\n     * Gets or sets the content mapping property for the callouts.\r\n    */\r\n    contentMemberPath: string;\r\n    /**\r\n     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.\r\n    */\r\n    targetSeries: IgxSeriesComponent;\r\n    /**\r\n     * Gets or sets a channel name to identify other callout layers within the chart to share collision information with.\r\n    */\r\n    collisionChannel: string;\r\n    /**\r\n     * Gets or sets how to select the final value to annotate.\r\n    */\r\n    isAutoCalloutBehaviorEnabled: boolean;\r\n    /**\r\n     * Gets or sets whether to use values, rather than labels for auto callout labels.\r\n    */\r\n    useValueForAutoCalloutLabels: boolean;\r\n    /**\r\n     * Gets or sets whether to allow for custom callout styles.\r\n    */\r\n    isCustomCalloutStyleEnabled: boolean;\r\n    /**\r\n     * Gets or sets the precision to use when values are used for the auto callout labels.\r\n    */\r\n    autoCalloutLabelPrecision: number;\r\n    /**\r\n     * Gets or sets the color to use for the callout text. Leave unset for an automatic value.\r\n    */\r\n    calloutTextColor: string;\r\n    /**\r\n     * Gets or sets the brush that specifies how the backgrounds for the callouts of the layer are painted. Leave unset for an automatic value.\r\n    */\r\n    calloutBackground: string;\r\n    /**\r\n     * Gets or sets the precision to use displaying values for interpolated crosshair positions.\r\n    */\r\n    calloutInterpolatedValuePrecision: number;\r\n    /**\r\n     * Gets or sets the brush that specifies how the outlines for the callouts of the layer are painted.\r\n    */\r\n    calloutOutline: string;\r\n    /**\r\n     * Gets or sets the brush that specifies how the leader lines for the callouts of the layer are painted.\r\n    */\r\n    calloutLeaderBrush: string;\r\n    /**\r\n     * Gets or sets the left padding to use withing the callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    calloutPaddingLeft: number;\r\n    /**\r\n     * Gets or sets the top padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    calloutPaddingTop: number;\r\n    /**\r\n     * Gets or sets the right padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    calloutPaddingRight: number;\r\n    /**\r\n     * Gets or sets the bottom padding to use within the callout. Leaving this NaN will use an automatic value related to the axis label margins.\r\n    */\r\n    calloutPaddingBottom: number;\r\n    /**\r\n     * Gets or sets the strategy to use for avoiding collisions between the callouts in this layer. Leave unset for an automatic value.\r\n    */\r\n    calloutCollisionMode: CalloutCollisionMode;\r\n    /**\r\n     * Gets or sets the padding to add to the callout positioning. Leave unset for an automatic value.\r\n    */\r\n    calloutPositionPadding: number;\r\n    /**\r\n     * Gets or sets the stroke thickness for the callout backing. Leave unset for an automatic value.\r\n    */\r\n    calloutStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.\r\n    */\r\n    textStyle: string;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    getItemValue(item: any, memberPathName: string): any;\r\n    /**\r\n     * Invalidates content of callout layer\r\n    \r\n    */\r\n    invalidateCalloutContent(): void;\r\n    private _calloutStyleUpdating;\r\n    /**\r\n     * Event raised when updating style of callout layer\r\n    */\r\n    readonly calloutStyleUpdating: EventEmitter<{\r\n        sender: any;\r\n        args: IgxCalloutStyleUpdatingEventArgs;\r\n    }>;\r\n    private _calloutContentUpdating;\r\n    /**\r\n     * Raised to allow you to decide on the content for an automatically created callout.\r\n    */\r\n    readonly calloutContentUpdating: EventEmitter<{\r\n        sender: any;\r\n        args: IgxCalloutContentUpdatingEventArgs;\r\n    }>;\r\n    private _calloutLabelUpdating;\r\n    /**\r\n     * Raised to allow you to decide on the label for an automatically created callout.\r\n    */\r\n    readonly calloutLabelUpdating: EventEmitter<{\r\n        sender: any;\r\n        args: IgxCalloutLabelUpdatingEventArgs;\r\n    }>;\r\n    private _calloutSeriesSelecting;\r\n    /**\r\n     * Raised to allow you to select a target series for a data bound callout.\r\n    */\r\n    readonly calloutSeriesSelecting: EventEmitter<{\r\n        sender: any;\r\n        args: IgxCalloutSeriesSelectingEventArgs;\r\n    }>;\r\n}\r\n"]}