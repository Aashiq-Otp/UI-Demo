{"version":3,"file":"igx-ring-series-base-component.d.ts","sources":["igx-ring-series-base-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, TemplateRef } from '@angular/core';\r\nimport { LabelsPosition } from \"./LabelsPosition\";\r\nimport { Visibility } from \"igniteui-angular-core\";\r\nimport { LeaderLineType } from \"./LeaderLineType\";\r\nimport { OthersCategoryType } from \"./OthersCategoryType\";\r\nimport { IgxPropertyUpdatedEventArgs } from \"igniteui-angular-core\";\r\nimport { RingSeriesBase } from \"./RingSeriesBase\";\r\n/**\r\n * Represents a IgxRingSeriesBaseComponent base series.\r\n*/\r\nexport declare const IgxRingSeriesBaseComponent_PROVIDERS: any[];\r\nexport declare abstract class IgxRingSeriesBaseComponent implements OnInit {\r\n    protected createImplementation(): RingSeriesBase;\r\n    ngOnInit(): void;\r\n    private _dataSource;\r\n    dataSource: Array<any>;\r\n    bindData(): void;\r\n    protected _implementation: any;\r\n    readonly i: RingSeriesBase;\r\n    private onImplementationCreated;\r\n    constructor();\r\n    static _createFromInternal(internal: any): IgxRingSeriesBaseComponent;\r\n    legend: any;\r\n    private _tooltipTemplate;\r\n    private _tooltipContent;\r\n    tooltipTemplate: TemplateRef<any>;\r\n    private _tooltipContainerTemplate;\r\n    tooltipContainerTemplate: TemplateRef<any>;\r\n    private _ensureTooltipCreated;\r\n    private _ensureTooltipDestroyed;\r\n    private _showDefaultTooltip;\r\n    /**\r\n     * Gets or sets whether default tooltip will be shown.\r\n    */\r\n    showDefaultTooltip: boolean;\r\n    sychronizeCollections(): void;\r\n    /**\r\n * Gets or Sets the property name that contains the values.\r\n*/\r\n    valueMemberPath: string;\r\n    /**\r\n     * Gets or sets the property name that contains the labels.\r\n    */\r\n    labelMemberPath: string;\r\n    /**\r\n     * Gets or sets the property name that contains the legend labels.\r\n    */\r\n    legendLabelMemberPath: string;\r\n    /**\r\n     * Gets or sets the position of chart labels.\r\n    */\r\n    labelsPosition: LabelsPosition;\r\n    /**\r\n     * Gets or sets whether the leader lines are visible.\r\n    */\r\n    leaderLineVisibility: Visibility;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    leaderLineFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    leaderLineStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    leaderLineStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    leaderLineOpacity: number;\r\n    ensureLeaderLineStyle(): void;\r\n    /**\r\n     * Gets or sets what type of leader lines will be used for the outside end labels.\r\n    */\r\n    leaderLineType: LeaderLineType;\r\n    /**\r\n     * Gets or sets the margin between a label and its leader line. The default is 6 pixels.\r\n    */\r\n    leaderLineMargin: number;\r\n    /**\r\n     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.\r\n    */\r\n    othersCategoryThreshold: number;\r\n    /**\r\n     * Gets or sets whether to use numeric or percent-based threshold value.\r\n    */\r\n    othersCategoryType: OthersCategoryType;\r\n    /**\r\n     * Gets or sets the label of the Others slice.\r\n    */\r\n    othersCategoryText: string;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.\r\n    */\r\n    formatLabel: (obj: any) => string;\r\n    /**\r\n     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.\r\n    */\r\n    formatLegendLabel: (obj: any) => string;\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    labelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LabelFormat string.\r\n    */\r\n    labelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    othersLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the OthersLabelFormat string.\r\n    */\r\n    othersLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    legendLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LegendLabelFormat string.\r\n    */\r\n    legendLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the label format string to use for the label.\r\n    */\r\n    legendOthersLabelFormat: string;\r\n    /**\r\n     * Gets or sets the format specifiers to use with the LegendOthersLabelFormat string.\r\n    */\r\n    legendOthersLabelFormatSpecifiers: any[];\r\n    /**\r\n     * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.\r\n    */\r\n    labelExtent: number;\r\n    /**\r\n     * Gets or sets the starting angle of the chart.\r\n     * The default zero value is equivalent to 3 o'clock.\r\n    */\r\n    startAngle: number;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    othersCategoryFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    othersCategoryStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    othersCategoryStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    othersCategoryOpacity: number;\r\n    ensureOthersCategoryStyle(): void;\r\n    /**\r\n     * Gets or sets the fill brush.\r\n    */\r\n    selectedSliceFill: string;\r\n    /**\r\n     * Gets or sets the stroke brush.\r\n    */\r\n    selectedSliceStroke: string;\r\n    /**\r\n     * Gets or sets the stroke thickness.\r\n    */\r\n    selectedSliceStrokeThickness: number;\r\n    /**\r\n     * Gets or sets the opacity.\r\n    */\r\n    selectedSliceOpacity: number;\r\n    ensureSelectedStyle(): void;\r\n    /**\r\n     * Gets or sets the palette of brushes to use for coloring the slices.\r\n    */\r\n    brushes: string[];\r\n    /**\r\n     * Gets or sets the palette of brushes to use for outlines on the slices.\r\n    */\r\n    outlines: string[];\r\n    /**\r\n     * Gets or sets the color for labels rendered outside of the pie chart.\r\n    */\r\n    labelOuterColor: string;\r\n    /**\r\n     * Gets or sets the color for labels rendered inside of the pie chart.\r\n    */\r\n    labelInnerColor: string;\r\n    /**\r\n     * Gets or sets whether all surface interactions with the plot area should be disabled.\r\n    */\r\n    isSurfaceInteractionDisabled: boolean;\r\n    /**\r\n     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.\r\n    */\r\n    radiusFactor: number;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n * Called by the UI framework to provide a UI container for rendering this control.\r\n\r\n* @param container  * The UI container element.\r\n*/\r\n    provideContainer(container: any): void;\r\n    private _propertyUpdated;\r\n    /**\r\n     * Event raised when a property (including \"effective\" and non-dependency property) value changes.\r\n    */\r\n    readonly propertyUpdated: EventEmitter<{\r\n        sender: any;\r\n        args: IgxPropertyUpdatedEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}