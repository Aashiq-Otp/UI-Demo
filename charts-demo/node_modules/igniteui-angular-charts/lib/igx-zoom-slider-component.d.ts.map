{"version":3,"file":"igx-zoom-slider-component.d.ts","sources":["igx-zoom-slider-component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ViewContainerRef, Injector, ComponentFactoryResolver, AfterContentInit, Renderer2, NgZone } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { ZoomSliderOrientation } from './ZoomSliderOrientation';\r\nimport { IgxZoomSliderResolvingAxisValueEventArgs } from './igx-zoom-slider-resolving-axis-value-event-args';\r\nimport { IgxRectChangedEventArgs } from \"igniteui-angular-core\";\r\nimport { ZoomSlider } from \"./ZoomSlider\";\r\nexport declare const IgxZoomSliderComponent_PROVIDERS: any[];\r\nexport declare class IgxZoomSliderComponent implements AfterContentInit {\r\n    private renderer;\r\n    private _elRef;\r\n    private ngZone;\r\n    private injector;\r\n    private componentFactoryResolver;\r\n    container: Element;\r\n    private _height;\r\n    private _width;\r\n    height: string;\r\n    width: string;\r\n    _dynamicContent: ViewContainerRef;\r\n    private _wrapper;\r\n    private _root;\r\n    constructor(renderer: Renderer2, _elRef: ViewContainerRef, ngZone: NgZone, injector: Injector, componentFactoryResolver: ComponentFactoryResolver);\r\n    updateStyle(): void;\r\n    ngOnDestroy(): void;\r\n    private _implementation;\r\n    ngAfterContentInit(): void;\r\n    protected createImplementation(): ZoomSlider;\r\n    readonly i: ZoomSlider;\r\n    private _zoomSlider;\r\n    protected static _staticStyling(container: any, component: any, parent?: any): void;\r\n    panTransitionDuration: number;\r\n    maxZoomWidth: number;\r\n    /**\r\n     * Gets or sets the scaling value used to affect the pixel density of the control.\r\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\r\n     * to appear blurry.\r\n    */\r\n    pixelScalingRatio: number;\r\n    actualPixelScalingRatio: number;\r\n    windowRect: IgRect;\r\n    minZoomWidth: number;\r\n    startInset: number;\r\n    endInset: number;\r\n    trackStartInset: number;\r\n    trackEndInset: number;\r\n    barExtent: number;\r\n    orientation: ZoomSliderOrientation;\r\n    lowerThumbBrush: string;\r\n    lowerThumbStrokeThickness: number;\r\n    higherThumbStrokeThickness: number;\r\n    higherThumbBrush: string;\r\n    lowerThumbOutline: string;\r\n    higherThumbOutline: string;\r\n    lowerThumbRidgesBrush: string;\r\n    higherThumbRidgesBrush: string;\r\n    lowerThumbWidth: number;\r\n    higherThumbWidth: number;\r\n    lowerThumbHeight: number;\r\n    higherThumbHeight: number;\r\n    lowerShadeBrush: string;\r\n    lowerShadeOutline: string;\r\n    lowerShadeStrokeThickness: number;\r\n    higherShadeBrush: string;\r\n    higherShadeOutline: string;\r\n    higherShadeStrokeThickness: number;\r\n    barBrush: string;\r\n    barOutline: string;\r\n    barStrokeThickness: number;\r\n    rangeThumbBrush: string;\r\n    rangeThumbOutline: string;\r\n    rangeThumbStrokeThickness: number;\r\n    rangeThumbRidgesBrush: string;\r\n    lowerCalloutBrush: string;\r\n    lowerCalloutTextColor: string;\r\n    lowerCalloutOutline: string;\r\n    lowerCalloutStrokeThickness: number;\r\n    higherCalloutBrush: string;\r\n    higherCalloutTextColor: string;\r\n    higherCalloutOutline: string;\r\n    higherCalloutStrokeThickness: number;\r\n    readonly isCustomThumbProvided: boolean;\r\n    readonly isCustomRangeThumbProvided: boolean;\r\n    readonly isCustomBarProvided: boolean;\r\n    readonly isCustomShadeProvided: boolean;\r\n    areThumbCalloutsEnabled: boolean;\r\n    thumbCalloutTextStyle: string;\r\n    findByName(name: string): any;\r\n    protected __p: string;\r\n    protected _hasUserValues: Set<string>;\r\n    protected readonly hasUserValues: Set<string>;\r\n    protected __m(propertyName: string): void;\r\n    protected _stylingContainer: any;\r\n    protected _stylingParent: any;\r\n    protected _inStyling: boolean;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    onDetachedFromUI(): void;\r\n    onAttachedToUI(): void;\r\n    /**\r\n     * Release any resources held by the ZoomSlider.\r\n    \r\n    */\r\n    destroy(): void;\r\n    /**\r\n     * Called by the UI framework to provide a UI container for rendering this control.\r\n    \r\n    * @param container  * The UI container element.\r\n    */\r\n    provideContainer(container: any): void;\r\n    flush(): void;\r\n    trackDirty(): void;\r\n    /**\r\n     * Shows the ZoomSlider.\r\n    \r\n    */\r\n    show(): void;\r\n    /**\r\n     * Hides the ZoomSlider.\r\n    \r\n    */\r\n    hide(): void;\r\n    private _resolvingAxisValue;\r\n    readonly resolvingAxisValue: EventEmitter<{\r\n        sender: any;\r\n        args: IgxZoomSliderResolvingAxisValueEventArgs;\r\n    }>;\r\n    private _windowRectChanged;\r\n    /**\r\n     * Occurs just after the current ZoomSlider's window rectangle is changed.\r\n    */\r\n    readonly windowRectChanged: EventEmitter<{\r\n        sender: any;\r\n        args: IgxRectChangedEventArgs;\r\n    }>;\r\n    protected _zoneRunner: (act: () => void) => void;\r\n    protected _runInZone(act: () => void): void;\r\n}\r\n"]}