{"version":3,"file":"igx-financial-overlay-component.d.ts","sources":["igx-financial-overlay-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { IgxFinancialSeriesComponent } from \"./igx-financial-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { FinancialOverlay } from \"./FinancialOverlay\";\r\n/**\r\n * Represents the base functionality for a IgxDataChartComponent financial overlay series.\r\n * The difference between a FinancialIndicator and a FinancialOverlay is small.\r\n * Overlays are usually drawn against the same axes as the price, but they don't\r\n * have to be. Overlays mostly display multiple values, but not all of them, and so\r\n * so some indicators.\r\n*\r\n* The `IgxFinancialOverlayComponent` class represents the base functionality for a IgxDataChartComponent financial overlay series.\r\n*\r\n* ```html\r\n* <igx-data-chart\r\n* #chart\r\n* [dataSource]=\"data\" >\r\n* <igx-ordinal-time-x-axis\r\n* dateTimeMemberPath=\"TimeStamp\"\r\n* #xAxis\r\n* >\r\n* </igx-ordinal-time-x-axis>\r\n* <igx-numeric-y-axis\r\n*     minimumValue=\"0\"\r\n*     #yAxis>\r\n* </igx-numeric-y-axis>\r\n* <igx-bollinger-bands-overlay\r\n* [xAxis]=\"xAxis\"\r\n*     [yAxis]=\"yAxis\"\r\n*     openMemberPath=\"open\"\r\n*     highMemberPath=\"high\"\r\n*     lowMemberPath=\"low\"\r\n*     closeMemberPath=\"close\"\r\n*     volumeMemberPath=\"volume\">\r\n* </igx-bollinger-bands-overlay>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series = new IgxBollingerBandsOverlayComponent();\r\n* series.xAxis = this.xAxis;\r\n* series.yAxis = this.yAxis;\r\n* series.openMemberPath = \"open\";\r\n* series.highMemberPath = \"high\";\r\n* series.lowMemberPath = \"low\";\r\n* series.closeMemberPath = \"close\";\r\n* series.volumeMemberPath=\"volume\";\r\n* this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxFinancialOverlayComponent_PROVIDERS: ({\r\n    provide: typeof IgxFinancialSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare abstract class IgxFinancialOverlayComponent extends IgxFinancialSeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: FinancialOverlay;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the number of values to hide at the beginning of the indicator.\r\n    *\r\n    * Use the `ignoreFirst` property to sets the number of values to hide at the beginning of the indicator.\r\n    *\r\n    * ```ts\r\n    *  series.ignoreFirst=2;\r\n    * ```\r\n    *\r\n    * ```html\r\n    *    <igx-data-chart\r\n    *    #chart\r\n    *        [dataSource]=\"data\" >\r\n    *  <igx-category-x-axis\r\n    *        label=\"label\"\r\n    *        #xAxis>\r\n    *        </igx-category-x-axis>\r\n    * <igx-numeric-y-axis\r\n    *        minimumValue=\"0\"\r\n    *        #yAxis>\r\n    * </igx-numeric-y-axis>\r\n    * <igx-bollinger-bands-overlay\r\n    *    [xAxis]=\"xAxis\"\r\n    *      [yAxis]=\"yAxis\"\r\n    *      openMemberPath=\"open\"\r\n    *      highMemberPath=\"high\"\r\n    *      lowMemberPath=\"low\"\r\n    *      closeMemberPath=\"close\"\r\n    *      volumeMemberPath=\"volume\"\r\n    * \t  ignoreFirst=\"2\">\r\n    * </igx-bollinger-bands-overlay>\r\n    *  </igx-data-chart>\r\n    * ```\r\n    */\r\n    ignoreFirst: number;\r\n    /**\r\n     * Scrolls the series to display the item for the specified data item.\r\n     * The series is scrolled by the minimum amount required to place the specified data item within\r\n     * the central 80% of the visible axis.\r\n    \r\n    * @param item  * The data item (item) to scroll to.\r\n    *\r\n    * Use the `scrollIntoView` method to scrolls the series to display the item for the specified data item.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n}\r\n"]}