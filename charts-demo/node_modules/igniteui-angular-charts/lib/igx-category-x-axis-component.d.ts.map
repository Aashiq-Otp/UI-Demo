{"version":3,"file":"igx-category-x-axis-component.d.ts","sources":["igx-category-x-axis-component.d.ts"],"names":[],"mappingssourcesContent":["import { Type, EventEmitter } from '@angular/core';\r\nimport { IgxCategoryAxisBaseComponent } from \"./igx-category-axis-base-component\";\r\nimport { IgxAxisComponent } from \"./igx-axis-component\";\r\nimport { CategoryXAxis } from \"./CategoryXAxis\";\r\n/**\r\n * Represents a IgxDataChartComponent category X axis.\r\n*\r\n* `IgxCategoryXAxisComponent` class represents a IgxDataChartComponent category X axis.\r\n*\r\n* ```html\r\n* <igx-data-chart [dataSource]=\"data\">\r\n*   <igx-category-x-axis #xAxis\r\n*     label=\"label\" >\r\n*   </igx-category-x-axis>\r\n*   <igx-numeric-y-axis #yAxis>\r\n*   </igx-numeric-y-axis>\r\n*   <igx-column-series\r\n*     [xAxis]=\"xAxis\"\r\n*     [yAxis]=\"yAxis\"\r\n*     valueMemberPath=\"value\">\r\n*   </igx-column-series>\r\n* </igx-data-chart>\r\n* ```\r\n*\r\n* ```ts\r\n* let series = new IgxColumnSeriesComponent();\r\n* series.xAxis = this.xAxis;\r\n* series.yAxis = this.yAxis;\r\n* series.valueMemberPath=\"value\";\r\n* this.chart.series.add(series);\r\n* ```\r\n*/\r\nexport declare const IgxCategoryXAxisComponent_PROVIDERS: {\r\n    provide: typeof IgxAxisComponent;\r\n    useExisting: Type<any>;\r\n}[];\r\nexport declare class IgxCategoryXAxisComponent extends IgxCategoryAxisBaseComponent {\r\n    protected createImplementation(): CategoryXAxis;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: CategoryXAxis;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the frequency of displayed labels.\r\n     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\r\n    *\r\n    * `interval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\"\r\n    *     interval=\"3\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxColumnSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * xAxis.interval=\"3\";\r\n    * series.yAxis = this.yAxis;\r\n    *\r\n    * series.valueMemberPath=\"value\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    interval: number;\r\n    /**\r\n     * Gets the effective value for the current Interval.\r\n    *\r\n    * ```ts\r\n    * let effectiveInterval: number = xAxis.actualInterval;\r\n    * ```\r\n    */\r\n    actualInterval: number;\r\n    /**\r\n     * Gets or sets the frequency of displayed minor lines.\r\n     * The set value is a factor that determines how the minor lines will be displayed.\r\n    *\r\n    * `minorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.\r\n    *\r\n    * `minorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `minorInterval` to 0.1.\r\n    *\r\n    * ```html\r\n    * <igx-data-chart [dataSource]=\"data\">\r\n    *   <igx-category-x-axis #xAxis\r\n    *     label=\"label\"\r\n    *     minorInterval=\"0.1\"\r\n    *     minorStroke=\"green\"\r\n    *     minorStrokeThickness=\"1\">\r\n    *   </igx-category-x-axis>\r\n    *   <igx-numeric-y-axis #yAxis>\r\n    *   </igx-numeric-y-axis>\r\n    *   <igx-column-series\r\n    *     [xAxis]=\"xAxis\"\r\n    *     [yAxis]=\"yAxis\"\r\n    *     valueMemberPath=\"value\">\r\n    *   </igx-column-series>\r\n    * </igx-data-chart>\r\n    * ```\r\n    *\r\n    * ```ts\r\n    * let series = new IgxColumnSeriesComponent();\r\n    * series.xAxis = this.xAxis;\r\n    * xAxis.minorInterval=\"0.1\";\r\n    * series.yAxis = this.yAxis;\r\n    * series.valueMemberPath=\"value\";\r\n    * this.chart.series.add(series);\r\n    * ```\r\n    */\r\n    minorInterval: number;\r\n    /**\r\n     * Gets the effective value for the current MinorInterval.\r\n    *\r\n    * ```ts\r\n    * let effectiveMinorInterval: number = xAxis.actualMinorInterval;\r\n    * ```\r\n    */\r\n    actualMinorInterval: number;\r\n    /**\r\n     * Scrolls the specified item into view.\r\n    \r\n    * @param item  * Data item to scroll into view\r\n    */\r\n    scrollIntoView(item: any): void;\r\n    scrollRangeIntoView(minimum: number, maximum: number): void;\r\n    private _actualIntervalChange;\r\n    readonly actualIntervalChange: EventEmitter<number>;\r\n    private _actualMinorIntervalChange;\r\n    readonly actualMinorIntervalChange: EventEmitter<number>;\r\n}\r\n"]}