{"version":3,"file":"igx-vertical-anchored-category-series-component.d.ts","sources":["igx-vertical-anchored-category-series-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxNumericXAxisComponent } from \"./igx-numeric-x-axis-component\";\r\nimport { IgxCategoryYAxisComponent } from \"./igx-category-y-axis-component\";\r\nimport { IgxAnchoredCategorySeriesComponent } from \"./igx-anchored-category-series-component\";\r\nimport { IgxMarkerSeriesComponent } from \"./igx-marker-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { VerticalAnchoredCategorySeries } from \"./VerticalAnchoredCategorySeries\";\r\n/**\r\n * Represents a vertically laid out category based series.\r\n*/\r\nexport declare const IgxVerticalAnchoredCategorySeriesComponent_PROVIDERS: ({\r\n    provide: typeof IgxMarkerSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare abstract class IgxVerticalAnchoredCategorySeriesComponent extends IgxAnchoredCategorySeriesComponent {\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: VerticalAnchoredCategorySeries;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the effective x-axis for the current CategorySeries object.\r\n    */\r\n    xAxis: IgxNumericXAxisComponent;\r\n    /**\r\n     * Gets or sets the effective y-axis for the current CategorySeries object.\r\n    */\r\n    yAxis: IgxCategoryYAxisComponent;\r\n    /**\r\n     * Gets whether or not the current series is vertical series\r\n    */\r\n    readonly isVertical: boolean;\r\n    findByName(name: string): any;\r\n    protected _styling(container: any, component: any, parent?: any): void;\r\n    /**\r\n     * Returns the offset value for this series if grouped on a category axis.\r\n    \r\n    */\r\n    getOffsetValue(): number;\r\n    /**\r\n     * Returns the width of the category grouping this series is in.\r\n    \r\n    */\r\n    getCategoryWidth(): number;\r\n    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;\r\n    /**\r\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\r\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\r\n    */\r\n    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;\r\n    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;\r\n    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;\r\n    /**\r\n     * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.\r\n    \r\n    * @param world  * The world position for which to return the index.\r\n    */\r\n    getExactItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the index of the item that resides at the provided world coordinates.\r\n    \r\n    * @param world  * The world coordinates of the requested item.\r\n    */\r\n    getItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    /**\r\n     * Determine if object can be used as YAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsYAxis(axis: any): boolean;\r\n    /**\r\n     * Determine if object can be used as XAxis\r\n    \r\n    * @param axis  * The object to check\r\n    */\r\n    canUseAsXAxis(axis: any): boolean;\r\n}\r\n"]}