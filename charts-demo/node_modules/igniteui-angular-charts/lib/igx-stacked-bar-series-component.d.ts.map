{"version":3,"file":"igx-stacked-bar-series-component.d.ts","sources":["igx-stacked-bar-series-component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { IgPoint } from \"igniteui-angular-core\";\r\nimport { IgxVerticalStackedSeriesBaseComponent } from \"./igx-vertical-stacked-series-base-component\";\r\nimport { IgxMarkerSeriesComponent } from \"./igx-marker-series-component\";\r\nimport { IgxSeriesComponent } from \"./igx-series-component\";\r\nimport { StackedBarSeries } from \"./StackedBarSeries\";\r\n/**\r\n * Represents a IgxDataChartComponent stacked bar series.\r\n*/\r\nexport declare const IgxStackedBarSeriesComponent_PROVIDERS: ({\r\n    provide: typeof IgxMarkerSeriesComponent;\r\n    useExisting: Type<any>;\r\n} | {\r\n    provide: typeof IgxSeriesComponent;\r\n    useExisting: Type<any>;\r\n})[];\r\nexport declare class IgxStackedBarSeriesComponent extends IgxVerticalStackedSeriesBaseComponent {\r\n    protected createImplementation(): StackedBarSeries;\r\n    /**\r\n                                 * @hidden\r\n                                 */\r\n    readonly i: StackedBarSeries;\r\n    constructor();\r\n    /**\r\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\r\n    */\r\n    radiusX: number;\r\n    /**\r\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\r\n    */\r\n    radiusY: number;\r\n    /**\r\n     * Scrolls the series to display the item for the specified data item.\r\n     * The series is scrolled by the minimum amount required to place the specified data item within\r\n     * the central 80% of the visible axis.\r\n    \r\n    * @param item  * The data item (item) to scroll to.\r\n    */\r\n    scrollIntoView(item: any): boolean;\r\n    /**\r\n     * Gets the index of the item that resides at the provided world coordinates.\r\n    \r\n    * @param world  * The world coordinates of the requested item.\r\n    */\r\n    getItemIndex(world: IgPoint): number;\r\n    /**\r\n     * Gets the item that is the best match for the specified world coordinates.\r\n    \r\n    * @param world  * The world coordinates to use.\r\n    */\r\n    getItem(world: IgPoint): any;\r\n    /**\r\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\r\n    \r\n    */\r\n    getItemSpan(): number;\r\n}\r\n"]}